
Password-activated door.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017c  00800060  000016b8  0000174c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000065  008001dc  008001dc  000018c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001934  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002632  00000000  00000000  00001a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dbb  00000000  00000000  0000407e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001417  00000000  00000000  00004e39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000488  00000000  00000000  00006250  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000077e  00000000  00000000  000066d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001efc  00000000  00000000  00006e56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000868  00000000  00000000  00008d52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <__vector_3>
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      54:	1f 08       	sbc	r1, r15
      56:	0d 08       	sbc	r0, r13
      58:	fc 07       	cpc	r31, r28
      5a:	ea 07       	cpc	r30, r26
      5c:	fb 07       	cpc	r31, r27
      5e:	fb 07       	cpc	r31, r27
      60:	fb 07       	cpc	r31, r27
      62:	fb 07       	cpc	r31, r27
      64:	fb 07       	cpc	r31, r27
      66:	fb 07       	cpc	r31, r27
      68:	fb 07       	cpc	r31, r27
      6a:	fb 07       	cpc	r31, r27
      6c:	fb 07       	cpc	r31, r27
      6e:	fb 07       	cpc	r31, r27
      70:	fb 07       	cpc	r31, r27
      72:	fb 07       	cpc	r31, r27
      74:	fb 07       	cpc	r31, r27
      76:	fb 07       	cpc	r31, r27
      78:	fb 07       	cpc	r31, r27
      7a:	fb 07       	cpc	r31, r27
      7c:	fb 07       	cpc	r31, r27
      7e:	fb 07       	cpc	r31, r27
      80:	fb 07       	cpc	r31, r27
      82:	fb 07       	cpc	r31, r27
      84:	fb 07       	cpc	r31, r27
      86:	fb 07       	cpc	r31, r27
      88:	fb 07       	cpc	r31, r27
      8a:	fb 07       	cpc	r31, r27
      8c:	fb 07       	cpc	r31, r27
      8e:	fb 07       	cpc	r31, r27
      90:	fb 07       	cpc	r31, r27
      92:	fb 07       	cpc	r31, r27
      94:	1f 08       	sbc	r1, r15
      96:	0d 08       	sbc	r0, r13
      98:	fc 07       	cpc	r31, r28
      9a:	ea 07       	cpc	r30, r26
      9c:	ce 08       	sbc	r12, r14
      9e:	c0 08       	sbc	r12, r0
      a0:	b2 08       	sbc	r11, r2
      a2:	a3 08       	sbc	r10, r3
      a4:	b1 08       	sbc	r11, r1
      a6:	b1 08       	sbc	r11, r1
      a8:	b1 08       	sbc	r11, r1
      aa:	b1 08       	sbc	r11, r1
      ac:	b1 08       	sbc	r11, r1
      ae:	b1 08       	sbc	r11, r1
      b0:	b1 08       	sbc	r11, r1
      b2:	b1 08       	sbc	r11, r1
      b4:	b1 08       	sbc	r11, r1
      b6:	b1 08       	sbc	r11, r1
      b8:	b1 08       	sbc	r11, r1
      ba:	b1 08       	sbc	r11, r1
      bc:	b1 08       	sbc	r11, r1
      be:	b1 08       	sbc	r11, r1
      c0:	b1 08       	sbc	r11, r1
      c2:	b1 08       	sbc	r11, r1
      c4:	b1 08       	sbc	r11, r1
      c6:	b1 08       	sbc	r11, r1
      c8:	b1 08       	sbc	r11, r1
      ca:	b1 08       	sbc	r11, r1
      cc:	b1 08       	sbc	r11, r1
      ce:	b1 08       	sbc	r11, r1
      d0:	b1 08       	sbc	r11, r1
      d2:	b1 08       	sbc	r11, r1
      d4:	b1 08       	sbc	r11, r1
      d6:	b1 08       	sbc	r11, r1
      d8:	b1 08       	sbc	r11, r1
      da:	b1 08       	sbc	r11, r1
      dc:	ce 08       	sbc	r12, r14
      de:	c0 08       	sbc	r12, r0
      e0:	b2 08       	sbc	r11, r2
      e2:	a3 08       	sbc	r10, r3

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf e5       	ldi	r28, 0x5F	; 95
      ea:	d8 e0       	ldi	r29, 0x08	; 8
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	11 e0       	ldi	r17, 0x01	; 1
      f2:	a0 e6       	ldi	r26, 0x60	; 96
      f4:	b0 e0       	ldi	r27, 0x00	; 0
      f6:	e8 eb       	ldi	r30, 0xB8	; 184
      f8:	f6 e1       	ldi	r31, 0x16	; 22
      fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0
     100:	ac 3d       	cpi	r26, 0xDC	; 220
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
     106:	22 e0       	ldi	r18, 0x02	; 2
     108:	ac ed       	ldi	r26, 0xDC	; 220
     10a:	b1 e0       	ldi	r27, 0x01	; 1
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	a1 34       	cpi	r26, 0x41	; 65
     112:	b2 07       	cpc	r27, r18
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 bf 09 	call	0x137e	; 0x137e <main>
     11a:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <delay_us>:
     122:	02 c0       	rjmp	.+4      	; 0x128 <delay_us+0x6>
     124:	00 00       	nop
     126:	01 97       	sbiw	r24, 0x01	; 1
     128:	00 97       	sbiw	r24, 0x00	; 0
     12a:	e1 f7       	brne	.-8      	; 0x124 <delay_us+0x2>
     12c:	08 95       	ret

0000012e <delay_ms>:
     12e:	07 c0       	rjmp	.+14     	; 0x13e <delay_ms+0x10>
     130:	e9 ef       	ldi	r30, 0xF9	; 249
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	31 97       	sbiw	r30, 0x01	; 1
     136:	f1 f7       	brne	.-4      	; 0x134 <delay_ms+0x6>
     138:	00 c0       	rjmp	.+0      	; 0x13a <delay_ms+0xc>
     13a:	00 00       	nop
     13c:	01 97       	sbiw	r24, 0x01	; 1
     13e:	00 97       	sbiw	r24, 0x00	; 0
     140:	b9 f7       	brne	.-18     	; 0x130 <delay_ms+0x2>
     142:	08 95       	ret

00000144 <lcdCommand>:
     144:	2b b3       	in	r18, 0x1b	; 27
     146:	98 2f       	mov	r25, r24
     148:	90 7f       	andi	r25, 0xF0	; 240
     14a:	2f 70       	andi	r18, 0x0F	; 15
     14c:	92 2b       	or	r25, r18
     14e:	9b bb       	out	0x1b, r25	; 27
     150:	d8 98       	cbi	0x1b, 0	; 27
     152:	d9 98       	cbi	0x1b, 1	; 27
     154:	da 9a       	sbi	0x1b, 2	; 27
     156:	00 00       	nop
     158:	da 98       	cbi	0x1b, 2	; 27
     15a:	24 e1       	ldi	r18, 0x14	; 20
     15c:	30 e0       	ldi	r19, 0x00	; 0
     15e:	00 00       	nop
     160:	21 50       	subi	r18, 0x01	; 1
     162:	30 40       	sbci	r19, 0x00	; 0
     164:	e1 f7       	brne	.-8      	; 0x15e <lcdCommand+0x1a>
     166:	9b b3       	in	r25, 0x1b	; 27
     168:	82 95       	swap	r24
     16a:	80 7f       	andi	r24, 0xF0	; 240
     16c:	9f 70       	andi	r25, 0x0F	; 15
     16e:	89 2b       	or	r24, r25
     170:	8b bb       	out	0x1b, r24	; 27
     172:	da 9a       	sbi	0x1b, 2	; 27
     174:	00 00       	nop
     176:	da 98       	cbi	0x1b, 2	; 27
     178:	08 95       	ret

0000017a <lcd_init>:
     17a:	8f ef       	ldi	r24, 0xFF	; 255
     17c:	8a bb       	out	0x1a, r24	; 26
     17e:	80 ed       	ldi	r24, 0xD0	; 208
     180:	97 e0       	ldi	r25, 0x07	; 7
     182:	00 00       	nop
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	e9 f7       	brne	.-6      	; 0x182 <lcd_init+0x8>
     188:	83 e3       	ldi	r24, 0x33	; 51
     18a:	0e 94 a2 00 	call	0x144	; 0x144 <lcdCommand>
     18e:	84 e6       	ldi	r24, 0x64	; 100
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	00 00       	nop
     194:	01 97       	sbiw	r24, 0x01	; 1
     196:	e9 f7       	brne	.-6      	; 0x192 <lcd_init+0x18>
     198:	82 e3       	ldi	r24, 0x32	; 50
     19a:	0e 94 a2 00 	call	0x144	; 0x144 <lcdCommand>
     19e:	84 e6       	ldi	r24, 0x64	; 100
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	00 00       	nop
     1a4:	01 97       	sbiw	r24, 0x01	; 1
     1a6:	e9 f7       	brne	.-6      	; 0x1a2 <lcd_init+0x28>
     1a8:	88 e2       	ldi	r24, 0x28	; 40
     1aa:	0e 94 a2 00 	call	0x144	; 0x144 <lcdCommand>
     1ae:	84 e6       	ldi	r24, 0x64	; 100
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	00 00       	nop
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	e9 f7       	brne	.-6      	; 0x1b2 <lcd_init+0x38>
     1b8:	8c e0       	ldi	r24, 0x0C	; 12
     1ba:	0e 94 a2 00 	call	0x144	; 0x144 <lcdCommand>
     1be:	84 e6       	ldi	r24, 0x64	; 100
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	00 00       	nop
     1c4:	01 97       	sbiw	r24, 0x01	; 1
     1c6:	e9 f7       	brne	.-6      	; 0x1c2 <lcd_init+0x48>
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	0e 94 a2 00 	call	0x144	; 0x144 <lcdCommand>
     1ce:	80 ed       	ldi	r24, 0xD0	; 208
     1d0:	97 e0       	ldi	r25, 0x07	; 7
     1d2:	00 00       	nop
     1d4:	01 97       	sbiw	r24, 0x01	; 1
     1d6:	e9 f7       	brne	.-6      	; 0x1d2 <lcd_init+0x58>
     1d8:	86 e0       	ldi	r24, 0x06	; 6
     1da:	0e 94 a2 00 	call	0x144	; 0x144 <lcdCommand>
     1de:	84 e6       	ldi	r24, 0x64	; 100
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	00 00       	nop
     1e4:	01 97       	sbiw	r24, 0x01	; 1
     1e6:	e9 f7       	brne	.-6      	; 0x1e2 <lcd_init+0x68>
     1e8:	08 95       	ret

000001ea <lcd_reset>:
     1ea:	8f ef       	ldi	r24, 0xFF	; 255
     1ec:	8a bb       	out	0x1a, r24	; 26
     1ee:	da 98       	cbi	0x1b, 2	; 27
     1f0:	80 e2       	ldi	r24, 0x20	; 32
     1f2:	9e e4       	ldi	r25, 0x4E	; 78
     1f4:	00 00       	nop
     1f6:	01 97       	sbiw	r24, 0x01	; 1
     1f8:	e9 f7       	brne	.-6      	; 0x1f4 <lcd_reset+0xa>
     1fa:	83 e0       	ldi	r24, 0x03	; 3
     1fc:	0e 94 a2 00 	call	0x144	; 0x144 <lcdCommand>
     200:	80 e1       	ldi	r24, 0x10	; 16
     202:	97 e2       	ldi	r25, 0x27	; 39
     204:	00 00       	nop
     206:	01 97       	sbiw	r24, 0x01	; 1
     208:	e9 f7       	brne	.-6      	; 0x204 <lcd_reset+0x1a>
     20a:	83 e0       	ldi	r24, 0x03	; 3
     20c:	0e 94 a2 00 	call	0x144	; 0x144 <lcdCommand>
     210:	88 ee       	ldi	r24, 0xE8	; 232
     212:	93 e0       	ldi	r25, 0x03	; 3
     214:	00 00       	nop
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	e9 f7       	brne	.-6      	; 0x214 <lcd_reset+0x2a>
     21a:	83 e0       	ldi	r24, 0x03	; 3
     21c:	0e 94 a2 00 	call	0x144	; 0x144 <lcdCommand>
     220:	88 ee       	ldi	r24, 0xE8	; 232
     222:	93 e0       	ldi	r25, 0x03	; 3
     224:	00 00       	nop
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	e9 f7       	brne	.-6      	; 0x224 <lcd_reset+0x3a>
     22a:	82 e0       	ldi	r24, 0x02	; 2
     22c:	0e 94 a2 00 	call	0x144	; 0x144 <lcdCommand>
     230:	88 ee       	ldi	r24, 0xE8	; 232
     232:	93 e0       	ldi	r25, 0x03	; 3
     234:	00 00       	nop
     236:	01 97       	sbiw	r24, 0x01	; 1
     238:	e9 f7       	brne	.-6      	; 0x234 <lcd_reset+0x4a>
     23a:	08 95       	ret

0000023c <lcdData>:
     23c:	2b b3       	in	r18, 0x1b	; 27
     23e:	98 2f       	mov	r25, r24
     240:	90 7f       	andi	r25, 0xF0	; 240
     242:	2f 70       	andi	r18, 0x0F	; 15
     244:	92 2b       	or	r25, r18
     246:	9b bb       	out	0x1b, r25	; 27
     248:	d8 9a       	sbi	0x1b, 0	; 27
     24a:	d9 98       	cbi	0x1b, 1	; 27
     24c:	da 9a       	sbi	0x1b, 2	; 27
     24e:	00 00       	nop
     250:	da 98       	cbi	0x1b, 2	; 27
     252:	9b b3       	in	r25, 0x1b	; 27
     254:	82 95       	swap	r24
     256:	80 7f       	andi	r24, 0xF0	; 240
     258:	9f 70       	andi	r25, 0x0F	; 15
     25a:	89 2b       	or	r24, r25
     25c:	8b bb       	out	0x1b, r24	; 27
     25e:	da 9a       	sbi	0x1b, 2	; 27
     260:	00 00       	nop
     262:	da 98       	cbi	0x1b, 2	; 27
     264:	08 95       	ret

00000266 <lcd_gotoxy>:
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	00 d0       	rcall	.+0      	; 0x26c <lcd_gotoxy+0x6>
     26c:	00 d0       	rcall	.+0      	; 0x26e <lcd_gotoxy+0x8>
     26e:	cd b7       	in	r28, 0x3d	; 61
     270:	de b7       	in	r29, 0x3e	; 62
     272:	90 e8       	ldi	r25, 0x80	; 128
     274:	99 83       	std	Y+1, r25	; 0x01
     276:	90 ec       	ldi	r25, 0xC0	; 192
     278:	9a 83       	std	Y+2, r25	; 0x02
     27a:	94 e9       	ldi	r25, 0x94	; 148
     27c:	9b 83       	std	Y+3, r25	; 0x03
     27e:	94 ed       	ldi	r25, 0xD4	; 212
     280:	9c 83       	std	Y+4, r25	; 0x04
     282:	81 50       	subi	r24, 0x01	; 1
     284:	fe 01       	movw	r30, r28
     286:	e6 0f       	add	r30, r22
     288:	f1 1d       	adc	r31, r1
     28a:	90 81       	ld	r25, Z
     28c:	89 0f       	add	r24, r25
     28e:	0e 94 a2 00 	call	0x144	; 0x144 <lcdCommand>
     292:	84 e6       	ldi	r24, 0x64	; 100
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	00 00       	nop
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	e9 f7       	brne	.-6      	; 0x296 <lcd_gotoxy+0x30>
     29c:	0f 90       	pop	r0
     29e:	0f 90       	pop	r0
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	08 95       	ret

000002aa <lcd_cursor_on>:
     2aa:	8f e0       	ldi	r24, 0x0F	; 15
     2ac:	0e 94 a2 00 	call	0x144	; 0x144 <lcdCommand>
     2b0:	84 e6       	ldi	r24, 0x64	; 100
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	00 00       	nop
     2b6:	01 97       	sbiw	r24, 0x01	; 1
     2b8:	e9 f7       	brne	.-6      	; 0x2b4 <lcd_cursor_on+0xa>
     2ba:	08 95       	ret

000002bc <lcd_cursor_off>:
     2bc:	8c e0       	ldi	r24, 0x0C	; 12
     2be:	0e 94 a2 00 	call	0x144	; 0x144 <lcdCommand>
     2c2:	84 e6       	ldi	r24, 0x64	; 100
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	00 00       	nop
     2c8:	01 97       	sbiw	r24, 0x01	; 1
     2ca:	e9 f7       	brne	.-6      	; 0x2c6 <lcd_cursor_off+0xa>
     2cc:	08 95       	ret

000002ce <lcd_move_cursor_left>:
     2ce:	80 e1       	ldi	r24, 0x10	; 16
     2d0:	0e 94 a2 00 	call	0x144	; 0x144 <lcdCommand>
     2d4:	84 e6       	ldi	r24, 0x64	; 100
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	00 00       	nop
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	e9 f7       	brne	.-6      	; 0x2d8 <lcd_move_cursor_left+0xa>
     2de:	08 95       	ret

000002e0 <lcd_move_cursor_right>:
     2e0:	84 e1       	ldi	r24, 0x14	; 20
     2e2:	0e 94 a2 00 	call	0x144	; 0x144 <lcdCommand>
     2e6:	84 e6       	ldi	r24, 0x64	; 100
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	00 00       	nop
     2ec:	01 97       	sbiw	r24, 0x01	; 1
     2ee:	e9 f7       	brne	.-6      	; 0x2ea <lcd_move_cursor_right+0xa>
     2f0:	08 95       	ret

000002f2 <lcd_print>:
     2f2:	fc 01       	movw	r30, r24
     2f4:	20 81       	ld	r18, Z
     2f6:	22 23       	and	r18, r18
     2f8:	e1 f0       	breq	.+56     	; 0x332 <lcd_print+0x40>
     2fa:	50 e0       	ldi	r21, 0x00	; 0
     2fc:	4b b3       	in	r20, 0x1b	; 27
     2fe:	32 2f       	mov	r19, r18
     300:	30 7f       	andi	r19, 0xF0	; 240
     302:	4f 70       	andi	r20, 0x0F	; 15
     304:	34 2b       	or	r19, r20
     306:	3b bb       	out	0x1b, r19	; 27
     308:	d8 9a       	sbi	0x1b, 0	; 27
     30a:	d9 98       	cbi	0x1b, 1	; 27
     30c:	da 9a       	sbi	0x1b, 2	; 27
     30e:	00 00       	nop
     310:	da 98       	cbi	0x1b, 2	; 27
     312:	3b b3       	in	r19, 0x1b	; 27
     314:	22 95       	swap	r18
     316:	20 7f       	andi	r18, 0xF0	; 240
     318:	3f 70       	andi	r19, 0x0F	; 15
     31a:	23 2b       	or	r18, r19
     31c:	2b bb       	out	0x1b, r18	; 27
     31e:	da 9a       	sbi	0x1b, 2	; 27
     320:	00 00       	nop
     322:	da 98       	cbi	0x1b, 2	; 27
     324:	5f 5f       	subi	r21, 0xFF	; 255
     326:	fc 01       	movw	r30, r24
     328:	e5 0f       	add	r30, r21
     32a:	f1 1d       	adc	r31, r1
     32c:	20 81       	ld	r18, Z
     32e:	22 23       	and	r18, r18
     330:	29 f7       	brne	.-54     	; 0x2fc <lcd_print+0xa>
     332:	08 95       	ret

00000334 <lcd_clear>:
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	0e 94 a2 00 	call	0x144	; 0x144 <lcdCommand>
     33a:	80 ed       	ldi	r24, 0xD0	; 208
     33c:	97 e0       	ldi	r25, 0x07	; 7
     33e:	00 00       	nop
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	e9 f7       	brne	.-6      	; 0x33e <lcd_clear+0xa>
     344:	80 e8       	ldi	r24, 0x80	; 128
     346:	0e 94 a2 00 	call	0x144	; 0x144 <lcdCommand>
     34a:	84 e6       	ldi	r24, 0x64	; 100
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	00 00       	nop
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	e9 f7       	brne	.-6      	; 0x34e <lcd_clear+0x1a>
     354:	08 95       	ret

00000356 <lcd_generate>:
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
     35a:	eb 01       	movw	r28, r22
     35c:	88 30       	cpi	r24, 0x08	; 8
     35e:	08 f0       	brcs	.+2      	; 0x362 <lcd_generate+0xc>
     360:	ae c0       	rjmp	.+348    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     362:	88 0f       	add	r24, r24
     364:	88 0f       	add	r24, r24
     366:	88 0f       	add	r24, r24
     368:	80 5c       	subi	r24, 0xC0	; 192
     36a:	0e 94 a2 00 	call	0x144	; 0x144 <lcdCommand>
     36e:	88 81       	ld	r24, Y
     370:	2b b3       	in	r18, 0x1b	; 27
     372:	98 2f       	mov	r25, r24
     374:	90 7f       	andi	r25, 0xF0	; 240
     376:	2f 70       	andi	r18, 0x0F	; 15
     378:	92 2b       	or	r25, r18
     37a:	9b bb       	out	0x1b, r25	; 27
     37c:	d8 9a       	sbi	0x1b, 0	; 27
     37e:	d9 98       	cbi	0x1b, 1	; 27
     380:	da 9a       	sbi	0x1b, 2	; 27
     382:	00 00       	nop
     384:	da 98       	cbi	0x1b, 2	; 27
     386:	9b b3       	in	r25, 0x1b	; 27
     388:	82 95       	swap	r24
     38a:	80 7f       	andi	r24, 0xF0	; 240
     38c:	9f 70       	andi	r25, 0x0F	; 15
     38e:	89 2b       	or	r24, r25
     390:	8b bb       	out	0x1b, r24	; 27
     392:	da 9a       	sbi	0x1b, 2	; 27
     394:	00 00       	nop
     396:	da 98       	cbi	0x1b, 2	; 27
     398:	89 81       	ldd	r24, Y+1	; 0x01
     39a:	2b b3       	in	r18, 0x1b	; 27
     39c:	98 2f       	mov	r25, r24
     39e:	90 7f       	andi	r25, 0xF0	; 240
     3a0:	2f 70       	andi	r18, 0x0F	; 15
     3a2:	92 2b       	or	r25, r18
     3a4:	9b bb       	out	0x1b, r25	; 27
     3a6:	d8 9a       	sbi	0x1b, 0	; 27
     3a8:	d9 98       	cbi	0x1b, 1	; 27
     3aa:	da 9a       	sbi	0x1b, 2	; 27
     3ac:	00 00       	nop
     3ae:	da 98       	cbi	0x1b, 2	; 27
     3b0:	9b b3       	in	r25, 0x1b	; 27
     3b2:	82 95       	swap	r24
     3b4:	80 7f       	andi	r24, 0xF0	; 240
     3b6:	9f 70       	andi	r25, 0x0F	; 15
     3b8:	89 2b       	or	r24, r25
     3ba:	8b bb       	out	0x1b, r24	; 27
     3bc:	da 9a       	sbi	0x1b, 2	; 27
     3be:	00 00       	nop
     3c0:	da 98       	cbi	0x1b, 2	; 27
     3c2:	8a 81       	ldd	r24, Y+2	; 0x02
     3c4:	2b b3       	in	r18, 0x1b	; 27
     3c6:	98 2f       	mov	r25, r24
     3c8:	90 7f       	andi	r25, 0xF0	; 240
     3ca:	2f 70       	andi	r18, 0x0F	; 15
     3cc:	92 2b       	or	r25, r18
     3ce:	9b bb       	out	0x1b, r25	; 27
     3d0:	d8 9a       	sbi	0x1b, 0	; 27
     3d2:	d9 98       	cbi	0x1b, 1	; 27
     3d4:	da 9a       	sbi	0x1b, 2	; 27
     3d6:	00 00       	nop
     3d8:	da 98       	cbi	0x1b, 2	; 27
     3da:	9b b3       	in	r25, 0x1b	; 27
     3dc:	82 95       	swap	r24
     3de:	80 7f       	andi	r24, 0xF0	; 240
     3e0:	9f 70       	andi	r25, 0x0F	; 15
     3e2:	89 2b       	or	r24, r25
     3e4:	8b bb       	out	0x1b, r24	; 27
     3e6:	da 9a       	sbi	0x1b, 2	; 27
     3e8:	00 00       	nop
     3ea:	da 98       	cbi	0x1b, 2	; 27
     3ec:	8b 81       	ldd	r24, Y+3	; 0x03
     3ee:	2b b3       	in	r18, 0x1b	; 27
     3f0:	98 2f       	mov	r25, r24
     3f2:	90 7f       	andi	r25, 0xF0	; 240
     3f4:	2f 70       	andi	r18, 0x0F	; 15
     3f6:	92 2b       	or	r25, r18
     3f8:	9b bb       	out	0x1b, r25	; 27
     3fa:	d8 9a       	sbi	0x1b, 0	; 27
     3fc:	d9 98       	cbi	0x1b, 1	; 27
     3fe:	da 9a       	sbi	0x1b, 2	; 27
     400:	00 00       	nop
     402:	da 98       	cbi	0x1b, 2	; 27
     404:	9b b3       	in	r25, 0x1b	; 27
     406:	82 95       	swap	r24
     408:	80 7f       	andi	r24, 0xF0	; 240
     40a:	9f 70       	andi	r25, 0x0F	; 15
     40c:	89 2b       	or	r24, r25
     40e:	8b bb       	out	0x1b, r24	; 27
     410:	da 9a       	sbi	0x1b, 2	; 27
     412:	00 00       	nop
     414:	da 98       	cbi	0x1b, 2	; 27
     416:	8c 81       	ldd	r24, Y+4	; 0x04
     418:	2b b3       	in	r18, 0x1b	; 27
     41a:	98 2f       	mov	r25, r24
     41c:	90 7f       	andi	r25, 0xF0	; 240
     41e:	2f 70       	andi	r18, 0x0F	; 15
     420:	92 2b       	or	r25, r18
     422:	9b bb       	out	0x1b, r25	; 27
     424:	d8 9a       	sbi	0x1b, 0	; 27
     426:	d9 98       	cbi	0x1b, 1	; 27
     428:	da 9a       	sbi	0x1b, 2	; 27
     42a:	00 00       	nop
     42c:	da 98       	cbi	0x1b, 2	; 27
     42e:	9b b3       	in	r25, 0x1b	; 27
     430:	82 95       	swap	r24
     432:	80 7f       	andi	r24, 0xF0	; 240
     434:	9f 70       	andi	r25, 0x0F	; 15
     436:	89 2b       	or	r24, r25
     438:	8b bb       	out	0x1b, r24	; 27
     43a:	da 9a       	sbi	0x1b, 2	; 27
     43c:	00 00       	nop
     43e:	da 98       	cbi	0x1b, 2	; 27
     440:	8d 81       	ldd	r24, Y+5	; 0x05
     442:	2b b3       	in	r18, 0x1b	; 27
     444:	98 2f       	mov	r25, r24
     446:	90 7f       	andi	r25, 0xF0	; 240
     448:	2f 70       	andi	r18, 0x0F	; 15
     44a:	92 2b       	or	r25, r18
     44c:	9b bb       	out	0x1b, r25	; 27
     44e:	d8 9a       	sbi	0x1b, 0	; 27
     450:	d9 98       	cbi	0x1b, 1	; 27
     452:	da 9a       	sbi	0x1b, 2	; 27
     454:	00 00       	nop
     456:	da 98       	cbi	0x1b, 2	; 27
     458:	9b b3       	in	r25, 0x1b	; 27
     45a:	82 95       	swap	r24
     45c:	80 7f       	andi	r24, 0xF0	; 240
     45e:	9f 70       	andi	r25, 0x0F	; 15
     460:	89 2b       	or	r24, r25
     462:	8b bb       	out	0x1b, r24	; 27
     464:	da 9a       	sbi	0x1b, 2	; 27
     466:	00 00       	nop
     468:	da 98       	cbi	0x1b, 2	; 27
     46a:	8e 81       	ldd	r24, Y+6	; 0x06
     46c:	2b b3       	in	r18, 0x1b	; 27
     46e:	98 2f       	mov	r25, r24
     470:	90 7f       	andi	r25, 0xF0	; 240
     472:	2f 70       	andi	r18, 0x0F	; 15
     474:	92 2b       	or	r25, r18
     476:	9b bb       	out	0x1b, r25	; 27
     478:	d8 9a       	sbi	0x1b, 0	; 27
     47a:	d9 98       	cbi	0x1b, 1	; 27
     47c:	da 9a       	sbi	0x1b, 2	; 27
     47e:	00 00       	nop
     480:	da 98       	cbi	0x1b, 2	; 27
     482:	9b b3       	in	r25, 0x1b	; 27
     484:	82 95       	swap	r24
     486:	80 7f       	andi	r24, 0xF0	; 240
     488:	9f 70       	andi	r25, 0x0F	; 15
     48a:	89 2b       	or	r24, r25
     48c:	8b bb       	out	0x1b, r24	; 27
     48e:	da 9a       	sbi	0x1b, 2	; 27
     490:	00 00       	nop
     492:	da 98       	cbi	0x1b, 2	; 27
     494:	8f 81       	ldd	r24, Y+7	; 0x07
     496:	2b b3       	in	r18, 0x1b	; 27
     498:	98 2f       	mov	r25, r24
     49a:	90 7f       	andi	r25, 0xF0	; 240
     49c:	2f 70       	andi	r18, 0x0F	; 15
     49e:	92 2b       	or	r25, r18
     4a0:	9b bb       	out	0x1b, r25	; 27
     4a2:	d8 9a       	sbi	0x1b, 0	; 27
     4a4:	d9 98       	cbi	0x1b, 1	; 27
     4a6:	da 9a       	sbi	0x1b, 2	; 27
     4a8:	00 00       	nop
     4aa:	da 98       	cbi	0x1b, 2	; 27
     4ac:	9b b3       	in	r25, 0x1b	; 27
     4ae:	82 95       	swap	r24
     4b0:	80 7f       	andi	r24, 0xF0	; 240
     4b2:	9f 70       	andi	r25, 0x0F	; 15
     4b4:	89 2b       	or	r24, r25
     4b6:	8b bb       	out	0x1b, r24	; 27
     4b8:	da 9a       	sbi	0x1b, 2	; 27
     4ba:	00 00       	nop
     4bc:	da 98       	cbi	0x1b, 2	; 27
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <init>:
     4c4:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_init>
     4c8:	80 e8       	ldi	r24, 0x80	; 128
     4ca:	61 e0       	ldi	r22, 0x01	; 1
     4cc:	40 e0       	ldi	r20, 0x00	; 0
     4ce:	0e 94 97 07 	call	0xf2e	; 0xf2e <adc_init>
     4d2:	82 e4       	ldi	r24, 0x42	; 66
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	41 e0       	ldi	r20, 0x01	; 1
     4d8:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_pinmode>
     4dc:	82 e4       	ldi	r24, 0x42	; 66
     4de:	61 e0       	ldi	r22, 0x01	; 1
     4e0:	41 e0       	ldi	r20, 0x01	; 1
     4e2:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_pinmode>
     4e6:	82 e4       	ldi	r24, 0x42	; 66
     4e8:	63 e0       	ldi	r22, 0x03	; 3
     4ea:	41 e0       	ldi	r20, 0x01	; 1
     4ec:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_pinmode>
     4f0:	82 e4       	ldi	r24, 0x42	; 66
     4f2:	64 e0       	ldi	r22, 0x04	; 4
     4f4:	41 e0       	ldi	r20, 0x01	; 1
     4f6:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_pinmode>
     4fa:	82 e4       	ldi	r24, 0x42	; 66
     4fc:	62 e0       	ldi	r22, 0x02	; 2
     4fe:	42 e0       	ldi	r20, 0x02	; 2
     500:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_pinmode>
     504:	85 e0       	ldi	r24, 0x05	; 5
     506:	63 e0       	ldi	r22, 0x03	; 3
     508:	0e 94 1c 09 	call	0x1238	; 0x1238 <set_externalInterrupt>
     50c:	78 94       	sei
     50e:	89 e1       	ldi	r24, 0x19	; 25
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	60 e0       	ldi	r22, 0x00	; 0
     514:	0e 94 08 09 	call	0x1210	; 0x1210 <eeprom_write>
     518:	08 95       	ret

0000051a <welcome_message>:
     51a:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
     51e:	80 e6       	ldi	r24, 0x60	; 96
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	62 e0       	ldi	r22, 0x02	; 2
     52a:	0e 94 33 01 	call	0x266	; 0x266 <lcd_gotoxy>
     52e:	84 e7       	ldi	r24, 0x74	; 116
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     536:	08 95       	ret

00000538 <choose_list>:
     538:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
     53c:	83 e8       	ldi	r24, 0x83	; 131
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	62 e0       	ldi	r22, 0x02	; 2
     548:	0e 94 33 01 	call	0x266	; 0x266 <lcd_gotoxy>
     54c:	8d e8       	ldi	r24, 0x8D	; 141
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     554:	08 95       	ret

00000556 <sign_up>:
     556:	af 92       	push	r10
     558:	bf 92       	push	r11
     55a:	cf 92       	push	r12
     55c:	df 92       	push	r13
     55e:	ef 92       	push	r14
     560:	ff 92       	push	r15
     562:	0f 93       	push	r16
     564:	1f 93       	push	r17
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
     56e:	66 97       	sbiw	r28, 0x16	; 22
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	f8 94       	cli
     574:	de bf       	out	0x3e, r29	; 62
     576:	0f be       	out	0x3f, r0	; 63
     578:	cd bf       	out	0x3d, r28	; 61
     57a:	2c e0       	ldi	r18, 0x0C	; 12
     57c:	e2 2e       	mov	r14, r18
     57e:	f1 2c       	mov	r15, r1
     580:	ec 0e       	add	r14, r28
     582:	fd 1e       	adc	r15, r29
     584:	6e 01       	movw	r12, r28
     586:	08 94       	sec
     588:	c1 1c       	adc	r12, r1
     58a:	d1 1c       	adc	r13, r1
     58c:	3b e0       	ldi	r19, 0x0B	; 11
     58e:	a3 2e       	mov	r10, r19
     590:	d7 01       	movw	r26, r14
     592:	ea 2d       	mov	r30, r10
     594:	1d 92       	st	X+, r1
     596:	ea 95       	dec	r30
     598:	e9 f7       	brne	.-6      	; 0x594 <sign_up+0x3e>
     59a:	d6 01       	movw	r26, r12
     59c:	ea 2d       	mov	r30, r10
     59e:	1d 92       	st	X+, r1
     5a0:	ea 95       	dec	r30
     5a2:	e9 f7       	brne	.-6      	; 0x59e <sign_up+0x48>
     5a4:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	61 e0       	ldi	r22, 0x01	; 1
     5ac:	0e 94 33 01 	call	0x266	; 0x266 <lcd_gotoxy>
     5b0:	80 ea       	ldi	r24, 0xA0	; 160
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	62 e0       	ldi	r22, 0x02	; 2
     5bc:	0e 94 33 01 	call	0x266	; 0x266 <lcd_gotoxy>
     5c0:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_cursor_on>
     5c4:	00 e0       	ldi	r16, 0x00	; 0
     5c6:	10 e0       	ldi	r17, 0x00	; 0
     5c8:	0e 94 65 09 	call	0x12ca	; 0x12ca <get_key>
     5cc:	83 32       	cpi	r24, 0x23	; 35
     5ce:	91 f0       	breq	.+36     	; 0x5f4 <sign_up+0x9e>
     5d0:	8a 32       	cpi	r24, 0x2A	; 42
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <sign_up+0x80>
     5d4:	59 c0       	rjmp	.+178    	; 0x688 <sign_up+0x132>
     5d6:	0a 30       	cpi	r16, 0x0A	; 10
     5d8:	11 05       	cpc	r17, r1
     5da:	b1 f3       	breq	.-20     	; 0x5c8 <sign_up+0x72>
     5dc:	f7 01       	movw	r30, r14
     5de:	e0 0f       	add	r30, r16
     5e0:	f1 1f       	adc	r31, r17
     5e2:	80 83       	st	Z, r24
     5e4:	0f 5f       	subi	r16, 0xFF	; 255
     5e6:	1f 4f       	sbci	r17, 0xFF	; 255
     5e8:	8a e2       	ldi	r24, 0x2A	; 42
     5ea:	0e 94 1e 01 	call	0x23c	; 0x23c <lcdData>
     5ee:	0b 30       	cpi	r16, 0x0B	; 11
     5f0:	11 05       	cpc	r17, r1
     5f2:	54 f3       	brlt	.-44     	; 0x5c8 <sign_up+0x72>
     5f4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_cursor_off>
     5f8:	b0 2e       	mov	r11, r16
     5fa:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	61 e0       	ldi	r22, 0x01	; 1
     602:	0e 94 33 01 	call	0x266	; 0x266 <lcd_gotoxy>
     606:	84 eb       	ldi	r24, 0xB4	; 180
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	62 e0       	ldi	r22, 0x02	; 2
     612:	0e 94 33 01 	call	0x266	; 0x266 <lcd_gotoxy>
     616:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_cursor_on>
     61a:	00 e0       	ldi	r16, 0x00	; 0
     61c:	10 e0       	ldi	r17, 0x00	; 0
     61e:	0e 94 65 09 	call	0x12ca	; 0x12ca <get_key>
     622:	83 32       	cpi	r24, 0x23	; 35
     624:	89 f0       	breq	.+34     	; 0x648 <sign_up+0xf2>
     626:	8a 32       	cpi	r24, 0x2A	; 42
     628:	e9 f1       	breq	.+122    	; 0x6a4 <sign_up+0x14e>
     62a:	0a 30       	cpi	r16, 0x0A	; 10
     62c:	11 05       	cpc	r17, r1
     62e:	b9 f3       	breq	.-18     	; 0x61e <sign_up+0xc8>
     630:	f6 01       	movw	r30, r12
     632:	e0 0f       	add	r30, r16
     634:	f1 1f       	adc	r31, r17
     636:	80 83       	st	Z, r24
     638:	0f 5f       	subi	r16, 0xFF	; 255
     63a:	1f 4f       	sbci	r17, 0xFF	; 255
     63c:	8a e2       	ldi	r24, 0x2A	; 42
     63e:	0e 94 1e 01 	call	0x23c	; 0x23c <lcdData>
     642:	0b 30       	cpi	r16, 0x0B	; 11
     644:	11 05       	cpc	r17, r1
     646:	5c f3       	brlt	.-42     	; 0x61e <sign_up+0xc8>
     648:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_cursor_off>
     64c:	b0 16       	cp	r11, r16
     64e:	c1 f1       	breq	.+112    	; 0x6c0 <sign_up+0x16a>
     650:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	61 e0       	ldi	r22, 0x01	; 1
     658:	0e 94 33 01 	call	0x266	; 0x266 <lcd_gotoxy>
     65c:	88 ec       	ldi	r24, 0xC8	; 200
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	62 e0       	ldi	r22, 0x02	; 2
     668:	0e 94 33 01 	call	0x266	; 0x266 <lcd_gotoxy>
     66c:	89 ed       	ldi	r24, 0xD9	; 217
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     674:	8f e3       	ldi	r24, 0x3F	; 63
     676:	9d e0       	ldi	r25, 0x0D	; 13
     678:	a3 e0       	ldi	r26, 0x03	; 3
     67a:	81 50       	subi	r24, 0x01	; 1
     67c:	90 40       	sbci	r25, 0x00	; 0
     67e:	a0 40       	sbci	r26, 0x00	; 0
     680:	e1 f7       	brne	.-8      	; 0x67a <sign_up+0x124>
     682:	00 c0       	rjmp	.+0      	; 0x684 <sign_up+0x12e>
     684:	00 00       	nop
     686:	84 cf       	rjmp	.-248    	; 0x590 <sign_up+0x3a>
     688:	01 15       	cp	r16, r1
     68a:	11 05       	cpc	r17, r1
     68c:	09 f4       	brne	.+2      	; 0x690 <sign_up+0x13a>
     68e:	9c cf       	rjmp	.-200    	; 0x5c8 <sign_up+0x72>
     690:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_move_cursor_left>
     694:	80 e2       	ldi	r24, 0x20	; 32
     696:	0e 94 1e 01 	call	0x23c	; 0x23c <lcdData>
     69a:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_move_cursor_left>
     69e:	01 50       	subi	r16, 0x01	; 1
     6a0:	10 40       	sbci	r17, 0x00	; 0
     6a2:	a5 cf       	rjmp	.-182    	; 0x5ee <sign_up+0x98>
     6a4:	01 15       	cp	r16, r1
     6a6:	11 05       	cpc	r17, r1
     6a8:	09 f4       	brne	.+2      	; 0x6ac <sign_up+0x156>
     6aa:	b9 cf       	rjmp	.-142    	; 0x61e <sign_up+0xc8>
     6ac:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_move_cursor_left>
     6b0:	80 e2       	ldi	r24, 0x20	; 32
     6b2:	0e 94 1e 01 	call	0x23c	; 0x23c <lcdData>
     6b6:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_move_cursor_left>
     6ba:	01 50       	subi	r16, 0x01	; 1
     6bc:	10 40       	sbci	r17, 0x00	; 0
     6be:	c1 cf       	rjmp	.-126    	; 0x642 <sign_up+0xec>
     6c0:	bb 20       	and	r11, r11
     6c2:	b9 f0       	breq	.+46     	; 0x6f2 <sign_up+0x19c>
     6c4:	9c 85       	ldd	r25, Y+12	; 0x0c
     6c6:	89 81       	ldd	r24, Y+1	; 0x01
     6c8:	98 17       	cp	r25, r24
     6ca:	11 f6       	brne	.-124    	; 0x650 <sign_up+0xfa>
     6cc:	fe 01       	movw	r30, r28
     6ce:	3d 96       	adiw	r30, 0x0d	; 13
     6d0:	de 01       	movw	r26, r28
     6d2:	12 96       	adiw	r26, 0x02	; 2
     6d4:	8b 2d       	mov	r24, r11
     6d6:	81 50       	subi	r24, 0x01	; 1
     6d8:	9f 01       	movw	r18, r30
     6da:	28 0f       	add	r18, r24
     6dc:	31 1d       	adc	r19, r1
     6de:	c9 01       	movw	r24, r18
     6e0:	e8 17       	cp	r30, r24
     6e2:	f9 07       	cpc	r31, r25
     6e4:	31 f0       	breq	.+12     	; 0x6f2 <sign_up+0x19c>
     6e6:	31 91       	ld	r19, Z+
     6e8:	2d 91       	ld	r18, X+
     6ea:	32 17       	cp	r19, r18
     6ec:	09 f0       	breq	.+2      	; 0x6f0 <sign_up+0x19a>
     6ee:	b0 cf       	rjmp	.-160    	; 0x650 <sign_up+0xfa>
     6f0:	f7 cf       	rjmp	.-18     	; 0x6e0 <sign_up+0x18a>
     6f2:	f8 94       	cli
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	6b 2d       	mov	r22, r11
     6fa:	0e 94 08 09 	call	0x1210	; 0x1210 <eeprom_write>
     6fe:	bb 20       	and	r11, r11
     700:	c1 f0       	breq	.+48     	; 0x732 <sign_up+0x1dc>
     702:	87 01       	movw	r16, r14
     704:	8d e0       	ldi	r24, 0x0D	; 13
     706:	c8 2e       	mov	r12, r24
     708:	d1 2c       	mov	r13, r1
     70a:	cc 0e       	add	r12, r28
     70c:	dd 1e       	adc	r13, r29
     70e:	ba 94       	dec	r11
     710:	cb 0c       	add	r12, r11
     712:	d1 1c       	adc	r13, r1
     714:	92 e0       	ldi	r25, 0x02	; 2
     716:	e9 2e       	mov	r14, r25
     718:	f1 2c       	mov	r15, r1
     71a:	d8 01       	movw	r26, r16
     71c:	6d 91       	ld	r22, X+
     71e:	8d 01       	movw	r16, r26
     720:	c7 01       	movw	r24, r14
     722:	0e 94 08 09 	call	0x1210	; 0x1210 <eeprom_write>
     726:	08 94       	sec
     728:	e1 1c       	adc	r14, r1
     72a:	f1 1c       	adc	r15, r1
     72c:	0c 15       	cp	r16, r12
     72e:	1d 05       	cpc	r17, r13
     730:	a1 f7       	brne	.-24     	; 0x71a <sign_up+0x1c4>
     732:	78 94       	sei
     734:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
     738:	88 ee       	ldi	r24, 0xE8	; 232
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	62 e0       	ldi	r22, 0x02	; 2
     744:	0e 94 33 01 	call	0x266	; 0x266 <lcd_gotoxy>
     748:	8b ef       	ldi	r24, 0xFB	; 251
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     750:	8f e3       	ldi	r24, 0x3F	; 63
     752:	9d e0       	ldi	r25, 0x0D	; 13
     754:	a3 e0       	ldi	r26, 0x03	; 3
     756:	81 50       	subi	r24, 0x01	; 1
     758:	90 40       	sbci	r25, 0x00	; 0
     75a:	a0 40       	sbci	r26, 0x00	; 0
     75c:	e1 f7       	brne	.-8      	; 0x756 <sign_up+0x200>
     75e:	00 c0       	rjmp	.+0      	; 0x760 <sign_up+0x20a>
     760:	00 00       	nop
     762:	66 96       	adiw	r28, 0x16	; 22
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	f8 94       	cli
     768:	de bf       	out	0x3e, r29	; 62
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	cd bf       	out	0x3d, r28	; 61
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	ff 90       	pop	r15
     778:	ef 90       	pop	r14
     77a:	df 90       	pop	r13
     77c:	cf 90       	pop	r12
     77e:	bf 90       	pop	r11
     780:	af 90       	pop	r10
     782:	08 95       	ret

00000784 <compare>:
     784:	42 17       	cp	r20, r18
     786:	11 f0       	breq	.+4      	; 0x78c <compare+0x8>
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	08 95       	ret
     78c:	44 23       	and	r20, r20
     78e:	99 f0       	breq	.+38     	; 0x7b6 <compare+0x32>
     790:	fc 01       	movw	r30, r24
     792:	30 81       	ld	r19, Z
     794:	fb 01       	movw	r30, r22
     796:	20 81       	ld	r18, Z
     798:	32 17       	cp	r19, r18
     79a:	b1 f7       	brne	.-20     	; 0x788 <compare+0x4>
     79c:	dc 01       	movw	r26, r24
     79e:	11 96       	adiw	r26, 0x01	; 1
     7a0:	31 96       	adiw	r30, 0x01	; 1
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	8f 5f       	subi	r24, 0xFF	; 255
     7a6:	84 17       	cp	r24, r20
     7a8:	31 f0       	breq	.+12     	; 0x7b6 <compare+0x32>
     7aa:	2d 91       	ld	r18, X+
     7ac:	91 91       	ld	r25, Z+
     7ae:	29 17       	cp	r18, r25
     7b0:	c9 f3       	breq	.-14     	; 0x7a4 <compare+0x20>
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	08 95       	ret
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	08 95       	ret

000007ba <change_password>:
     7ba:	af 92       	push	r10
     7bc:	bf 92       	push	r11
     7be:	cf 92       	push	r12
     7c0:	df 92       	push	r13
     7c2:	ef 92       	push	r14
     7c4:	ff 92       	push	r15
     7c6:	0f 93       	push	r16
     7c8:	1f 93       	push	r17
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
     7d2:	2a 97       	sbiw	r28, 0x0a	; 10
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	f8 94       	cli
     7d8:	de bf       	out	0x3e, r29	; 62
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	cd bf       	out	0x3d, r28	; 61
     7de:	6e 01       	movw	r12, r28
     7e0:	08 94       	sec
     7e2:	c1 1c       	adc	r12, r1
     7e4:	d1 1c       	adc	r13, r1
     7e6:	4a e0       	ldi	r20, 0x0A	; 10
     7e8:	b4 2e       	mov	r11, r20
     7ea:	d6 01       	movw	r26, r12
     7ec:	eb 2d       	mov	r30, r11
     7ee:	1d 92       	st	X+, r1
     7f0:	ea 95       	dec	r30
     7f2:	e9 f7       	brne	.-6      	; 0x7ee <change_password+0x34>
     7f4:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
     7f8:	8a e0       	ldi	r24, 0x0A	; 10
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	62 e0       	ldi	r22, 0x02	; 2
     804:	0e 94 33 01 	call	0x266	; 0x266 <lcd_gotoxy>
     808:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_cursor_on>
     80c:	00 e0       	ldi	r16, 0x00	; 0
     80e:	10 e0       	ldi	r17, 0x00	; 0
     810:	0e 94 65 09 	call	0x12ca	; 0x12ca <get_key>
     814:	83 32       	cpi	r24, 0x23	; 35
     816:	89 f0       	breq	.+34     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     818:	8a 32       	cpi	r24, 0x2A	; 42
     81a:	b9 f1       	breq	.+110    	; 0x88a <__stack+0x2b>
     81c:	0a 30       	cpi	r16, 0x0A	; 10
     81e:	11 05       	cpc	r17, r1
     820:	b9 f3       	breq	.-18     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     822:	f6 01       	movw	r30, r12
     824:	e0 0f       	add	r30, r16
     826:	f1 1f       	adc	r31, r17
     828:	80 83       	st	Z, r24
     82a:	0f 5f       	subi	r16, 0xFF	; 255
     82c:	1f 4f       	sbci	r17, 0xFF	; 255
     82e:	8a e2       	ldi	r24, 0x2A	; 42
     830:	0e 94 1e 01 	call	0x23c	; 0x23c <lcdData>
     834:	0b 30       	cpi	r16, 0x0B	; 11
     836:	11 05       	cpc	r17, r1
     838:	5c f3       	brlt	.-42     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     83a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_cursor_off>
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	0e 94 15 09 	call	0x122a	; 0x122a <eeprom_read>
     844:	08 17       	cp	r16, r24
     846:	89 f6       	brne	.-94     	; 0x7ea <change_password+0x30>
     848:	00 23       	and	r16, r16
     84a:	69 f1       	breq	.+90     	; 0x8a6 <__stack+0x47>
     84c:	76 01       	movw	r14, r12
     84e:	0e 5f       	subi	r16, 0xFE	; 254
     850:	12 e0       	ldi	r17, 0x02	; 2
     852:	03 c0       	rjmp	.+6      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     854:	1f 5f       	subi	r17, 0xFF	; 255
     856:	10 17       	cp	r17, r16
     858:	31 f1       	breq	.+76     	; 0x8a6 <__stack+0x47>
     85a:	d7 01       	movw	r26, r14
     85c:	ad 90       	ld	r10, X+
     85e:	7d 01       	movw	r14, r26
     860:	81 2f       	mov	r24, r17
     862:	0e 94 15 09 	call	0x122a	; 0x122a <eeprom_read>
     866:	a8 16       	cp	r10, r24
     868:	a9 f3       	breq	.-22     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
     86a:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
     86e:	8e e1       	ldi	r24, 0x1E	; 30
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     876:	8f e3       	ldi	r24, 0x3F	; 63
     878:	9d e0       	ldi	r25, 0x0D	; 13
     87a:	a3 e0       	ldi	r26, 0x03	; 3
     87c:	81 50       	subi	r24, 0x01	; 1
     87e:	90 40       	sbci	r25, 0x00	; 0
     880:	a0 40       	sbci	r26, 0x00	; 0
     882:	e1 f7       	brne	.-8      	; 0x87c <__stack+0x1d>
     884:	00 c0       	rjmp	.+0      	; 0x886 <__stack+0x27>
     886:	00 00       	nop
     888:	b0 cf       	rjmp	.-160    	; 0x7ea <change_password+0x30>
     88a:	01 15       	cp	r16, r1
     88c:	11 05       	cpc	r17, r1
     88e:	09 f4       	brne	.+2      	; 0x892 <__stack+0x33>
     890:	bf cf       	rjmp	.-130    	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     892:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_move_cursor_left>
     896:	80 e2       	ldi	r24, 0x20	; 32
     898:	0e 94 1e 01 	call	0x23c	; 0x23c <lcdData>
     89c:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_move_cursor_left>
     8a0:	01 50       	subi	r16, 0x01	; 1
     8a2:	10 40       	sbci	r17, 0x00	; 0
     8a4:	c7 cf       	rjmp	.-114    	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     8a6:	0e 94 ab 02 	call	0x556	; 0x556 <sign_up>
     8aa:	2a 96       	adiw	r28, 0x0a	; 10
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	1f 91       	pop	r17
     8bc:	0f 91       	pop	r16
     8be:	ff 90       	pop	r15
     8c0:	ef 90       	pop	r14
     8c2:	df 90       	pop	r13
     8c4:	cf 90       	pop	r12
     8c6:	bf 90       	pop	r11
     8c8:	af 90       	pop	r10
     8ca:	08 95       	ret

000008cc <get_password>:
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	8c 01       	movw	r16, r24
     8d6:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_cursor_on>
     8da:	c0 e0       	ldi	r28, 0x00	; 0
     8dc:	d0 e0       	ldi	r29, 0x00	; 0
     8de:	0e 94 65 09 	call	0x12ca	; 0x12ca <get_key>
     8e2:	83 32       	cpi	r24, 0x23	; 35
     8e4:	81 f0       	breq	.+32     	; 0x906 <get_password+0x3a>
     8e6:	8a 32       	cpi	r24, 0x2A	; 42
     8e8:	b1 f0       	breq	.+44     	; 0x916 <get_password+0x4a>
     8ea:	ca 30       	cpi	r28, 0x0A	; 10
     8ec:	d1 05       	cpc	r29, r1
     8ee:	b9 f3       	breq	.-18     	; 0x8de <get_password+0x12>
     8f0:	f8 01       	movw	r30, r16
     8f2:	ec 0f       	add	r30, r28
     8f4:	fd 1f       	adc	r31, r29
     8f6:	80 83       	st	Z, r24
     8f8:	21 96       	adiw	r28, 0x01	; 1
     8fa:	8a e2       	ldi	r24, 0x2A	; 42
     8fc:	0e 94 1e 01 	call	0x23c	; 0x23c <lcdData>
     900:	cb 30       	cpi	r28, 0x0B	; 11
     902:	d1 05       	cpc	r29, r1
     904:	64 f3       	brlt	.-40     	; 0x8de <get_password+0x12>
     906:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_cursor_off>
     90a:	8c 2f       	mov	r24, r28
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	1f 91       	pop	r17
     912:	0f 91       	pop	r16
     914:	08 95       	ret
     916:	20 97       	sbiw	r28, 0x00	; 0
     918:	11 f3       	breq	.-60     	; 0x8de <get_password+0x12>
     91a:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_move_cursor_left>
     91e:	80 e2       	ldi	r24, 0x20	; 32
     920:	0e 94 1e 01 	call	0x23c	; 0x23c <lcdData>
     924:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_move_cursor_left>
     928:	21 97       	sbiw	r28, 0x01	; 1
     92a:	ea cf       	rjmp	.-44     	; 0x900 <get_password+0x34>

0000092c <check_password>:
     92c:	cf 92       	push	r12
     92e:	df 92       	push	r13
     930:	ff 92       	push	r15
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	00 d0       	rcall	.+0      	; 0x93c <check_password+0x10>
     93c:	cd b7       	in	r28, 0x3d	; 61
     93e:	de b7       	in	r29, 0x3e	; 62
     940:	18 2f       	mov	r17, r24
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	69 83       	std	Y+1, r22	; 0x01
     946:	7a 83       	std	Y+2, r23	; 0x02
     948:	0e 94 15 09 	call	0x122a	; 0x122a <eeprom_read>
     94c:	69 81       	ldd	r22, Y+1	; 0x01
     94e:	7a 81       	ldd	r23, Y+2	; 0x02
     950:	81 17       	cp	r24, r17
     952:	59 f0       	breq	.+22     	; 0x96a <check_password+0x3e>
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	0f 90       	pop	r0
     958:	0f 90       	pop	r0
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	1f 91       	pop	r17
     960:	0f 91       	pop	r16
     962:	ff 90       	pop	r15
     964:	df 90       	pop	r13
     966:	cf 90       	pop	r12
     968:	08 95       	ret
     96a:	88 23       	and	r24, r24
     96c:	11 f1       	breq	.+68     	; 0x9b2 <check_password+0x86>
     96e:	6b 01       	movw	r12, r22
     970:	52 e0       	ldi	r21, 0x02	; 2
     972:	f5 2e       	mov	r15, r21
     974:	f8 0e       	add	r15, r24
     976:	12 e0       	ldi	r17, 0x02	; 2
     978:	03 c0       	rjmp	.+6      	; 0x980 <check_password+0x54>
     97a:	1f 5f       	subi	r17, 0xFF	; 255
     97c:	1f 15       	cp	r17, r15
     97e:	c9 f0       	breq	.+50     	; 0x9b2 <check_password+0x86>
     980:	d6 01       	movw	r26, r12
     982:	0d 91       	ld	r16, X+
     984:	6d 01       	movw	r12, r26
     986:	81 2f       	mov	r24, r17
     988:	0e 94 15 09 	call	0x122a	; 0x122a <eeprom_read>
     98c:	08 17       	cp	r16, r24
     98e:	a9 f3       	breq	.-22     	; 0x97a <check_password+0x4e>
     990:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
     994:	8e e1       	ldi	r24, 0x1E	; 30
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     99c:	8f e3       	ldi	r24, 0x3F	; 63
     99e:	9d e0       	ldi	r25, 0x0D	; 13
     9a0:	a3 e0       	ldi	r26, 0x03	; 3
     9a2:	81 50       	subi	r24, 0x01	; 1
     9a4:	90 40       	sbci	r25, 0x00	; 0
     9a6:	a0 40       	sbci	r26, 0x00	; 0
     9a8:	e1 f7       	brne	.-8      	; 0x9a2 <check_password+0x76>
     9aa:	00 c0       	rjmp	.+0      	; 0x9ac <check_password+0x80>
     9ac:	00 00       	nop
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	d2 cf       	rjmp	.-92     	; 0x956 <check_password+0x2a>
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	d0 cf       	rjmp	.-96     	; 0x956 <check_password+0x2a>

000009b6 <open_the_door>:
     9b6:	82 e4       	ldi	r24, 0x42	; 66
     9b8:	63 e0       	ldi	r22, 0x03	; 3
     9ba:	41 e0       	ldi	r20, 0x01	; 1
     9bc:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_write>
     9c0:	82 e4       	ldi	r24, 0x42	; 66
     9c2:	60 e0       	ldi	r22, 0x00	; 0
     9c4:	41 e0       	ldi	r20, 0x01	; 1
     9c6:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_write>
     9ca:	82 e4       	ldi	r24, 0x42	; 66
     9cc:	61 e0       	ldi	r22, 0x01	; 1
     9ce:	40 e0       	ldi	r20, 0x00	; 0
     9d0:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_write>
     9d4:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
     9d8:	84 e2       	ldi	r24, 0x24	; 36
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     9e0:	8f e7       	ldi	r24, 0x7F	; 127
     9e2:	9a e1       	ldi	r25, 0x1A	; 26
     9e4:	a6 e0       	ldi	r26, 0x06	; 6
     9e6:	81 50       	subi	r24, 0x01	; 1
     9e8:	90 40       	sbci	r25, 0x00	; 0
     9ea:	a0 40       	sbci	r26, 0x00	; 0
     9ec:	e1 f7       	brne	.-8      	; 0x9e6 <open_the_door+0x30>
     9ee:	00 c0       	rjmp	.+0      	; 0x9f0 <open_the_door+0x3a>
     9f0:	00 00       	nop
     9f2:	82 e4       	ldi	r24, 0x42	; 66
     9f4:	63 e0       	ldi	r22, 0x03	; 3
     9f6:	40 e0       	ldi	r20, 0x00	; 0
     9f8:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_write>
     9fc:	89 e1       	ldi	r24, 0x19	; 25
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	0e 94 08 09 	call	0x1210	; 0x1210 <eeprom_write>
     a06:	08 95       	ret

00000a08 <close_the_door>:
     a08:	82 e4       	ldi	r24, 0x42	; 66
     a0a:	63 e0       	ldi	r22, 0x03	; 3
     a0c:	41 e0       	ldi	r20, 0x01	; 1
     a0e:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_write>
     a12:	82 e4       	ldi	r24, 0x42	; 66
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_write>
     a1c:	82 e4       	ldi	r24, 0x42	; 66
     a1e:	61 e0       	ldi	r22, 0x01	; 1
     a20:	41 e0       	ldi	r20, 0x01	; 1
     a22:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_write>
     a26:	82 e4       	ldi	r24, 0x42	; 66
     a28:	64 e0       	ldi	r22, 0x04	; 4
     a2a:	41 e0       	ldi	r20, 0x01	; 1
     a2c:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_write>
     a30:	c4 9a       	sbi	0x18, 4	; 24
     a32:	8f e7       	ldi	r24, 0x7F	; 127
     a34:	9a e1       	ldi	r25, 0x1A	; 26
     a36:	a6 e0       	ldi	r26, 0x06	; 6
     a38:	81 50       	subi	r24, 0x01	; 1
     a3a:	90 40       	sbci	r25, 0x00	; 0
     a3c:	a0 40       	sbci	r26, 0x00	; 0
     a3e:	e1 f7       	brne	.-8      	; 0xa38 <close_the_door+0x30>
     a40:	00 c0       	rjmp	.+0      	; 0xa42 <close_the_door+0x3a>
     a42:	00 00       	nop
     a44:	82 e4       	ldi	r24, 0x42	; 66
     a46:	64 e0       	ldi	r22, 0x04	; 4
     a48:	40 e0       	ldi	r20, 0x00	; 0
     a4a:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_write>
     a4e:	82 e4       	ldi	r24, 0x42	; 66
     a50:	63 e0       	ldi	r22, 0x03	; 3
     a52:	40 e0       	ldi	r20, 0x00	; 0
     a54:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_write>
     a58:	08 95       	ret

00000a5a <__vector_3>:
     a5a:	1f 92       	push	r1
     a5c:	0f 92       	push	r0
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	0f 92       	push	r0
     a62:	11 24       	eor	r1, r1
     a64:	2f 93       	push	r18
     a66:	3f 93       	push	r19
     a68:	4f 93       	push	r20
     a6a:	5f 93       	push	r21
     a6c:	6f 93       	push	r22
     a6e:	7f 93       	push	r23
     a70:	8f 93       	push	r24
     a72:	9f 93       	push	r25
     a74:	af 93       	push	r26
     a76:	bf 93       	push	r27
     a78:	ef 93       	push	r30
     a7a:	ff 93       	push	r31
     a7c:	f8 94       	cli
     a7e:	82 e4       	ldi	r24, 0x42	; 66
     a80:	63 e0       	ldi	r22, 0x03	; 3
     a82:	41 e0       	ldi	r20, 0x01	; 1
     a84:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_write>
     a88:	82 e4       	ldi	r24, 0x42	; 66
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	40 e0       	ldi	r20, 0x00	; 0
     a8e:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_write>
     a92:	82 e4       	ldi	r24, 0x42	; 66
     a94:	61 e0       	ldi	r22, 0x01	; 1
     a96:	41 e0       	ldi	r20, 0x01	; 1
     a98:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_write>
     a9c:	82 e4       	ldi	r24, 0x42	; 66
     a9e:	64 e0       	ldi	r22, 0x04	; 4
     aa0:	41 e0       	ldi	r20, 0x01	; 1
     aa2:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_write>
     aa6:	c4 9a       	sbi	0x18, 4	; 24
     aa8:	8f e7       	ldi	r24, 0x7F	; 127
     aaa:	9a e1       	ldi	r25, 0x1A	; 26
     aac:	a6 e0       	ldi	r26, 0x06	; 6
     aae:	81 50       	subi	r24, 0x01	; 1
     ab0:	90 40       	sbci	r25, 0x00	; 0
     ab2:	a0 40       	sbci	r26, 0x00	; 0
     ab4:	e1 f7       	brne	.-8      	; 0xaae <__vector_3+0x54>
     ab6:	00 c0       	rjmp	.+0      	; 0xab8 <__vector_3+0x5e>
     ab8:	00 00       	nop
     aba:	82 e4       	ldi	r24, 0x42	; 66
     abc:	64 e0       	ldi	r22, 0x04	; 4
     abe:	40 e0       	ldi	r20, 0x00	; 0
     ac0:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_write>
     ac4:	82 e4       	ldi	r24, 0x42	; 66
     ac6:	63 e0       	ldi	r22, 0x03	; 3
     ac8:	40 e0       	ldi	r20, 0x00	; 0
     aca:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_write>
     ace:	78 94       	sei
     ad0:	ff 91       	pop	r31
     ad2:	ef 91       	pop	r30
     ad4:	bf 91       	pop	r27
     ad6:	af 91       	pop	r26
     ad8:	9f 91       	pop	r25
     ada:	8f 91       	pop	r24
     adc:	7f 91       	pop	r23
     ade:	6f 91       	pop	r22
     ae0:	5f 91       	pop	r21
     ae2:	4f 91       	pop	r20
     ae4:	3f 91       	pop	r19
     ae6:	2f 91       	pop	r18
     ae8:	0f 90       	pop	r0
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	0f 90       	pop	r0
     aee:	1f 90       	pop	r1
     af0:	18 95       	reti

00000af2 <get_puk_code>:
     af2:	ef 92       	push	r14
     af4:	ff 92       	push	r15
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	cd b7       	in	r28, 0x3d	; 61
     b00:	de b7       	in	r29, 0x3e	; 62
     b02:	2b 97       	sbiw	r28, 0x0b	; 11
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	f8 94       	cli
     b08:	de bf       	out	0x3e, r29	; 62
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	cd bf       	out	0x3d, r28	; 61
     b0e:	7e 01       	movw	r14, r28
     b10:	08 94       	sec
     b12:	e1 1c       	adc	r14, r1
     b14:	f1 1c       	adc	r15, r1
     b16:	8a e0       	ldi	r24, 0x0A	; 10
     b18:	d7 01       	movw	r26, r14
     b1a:	1d 92       	st	X+, r1
     b1c:	8a 95       	dec	r24
     b1e:	e9 f7       	brne	.-6      	; 0xb1a <get_puk_code+0x28>
     b20:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
     b24:	88 e3       	ldi	r24, 0x38	; 56
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	62 e0       	ldi	r22, 0x02	; 2
     b30:	0e 94 33 01 	call	0x266	; 0x266 <lcd_gotoxy>
     b34:	8d e4       	ldi	r24, 0x4D	; 77
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     b3c:	8f e3       	ldi	r24, 0x3F	; 63
     b3e:	9d e0       	ldi	r25, 0x0D	; 13
     b40:	a3 e0       	ldi	r26, 0x03	; 3
     b42:	81 50       	subi	r24, 0x01	; 1
     b44:	90 40       	sbci	r25, 0x00	; 0
     b46:	a0 40       	sbci	r26, 0x00	; 0
     b48:	e1 f7       	brne	.-8      	; 0xb42 <get_puk_code+0x50>
     b4a:	00 c0       	rjmp	.+0      	; 0xb4c <get_puk_code+0x5a>
     b4c:	00 00       	nop
     b4e:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
     b52:	8d e5       	ldi	r24, 0x5D	; 93
     b54:	91 e0       	ldi	r25, 0x01	; 1
     b56:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	62 e0       	ldi	r22, 0x02	; 2
     b5e:	0e 94 33 01 	call	0x266	; 0x266 <lcd_gotoxy>
     b62:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_cursor_on>
     b66:	00 e0       	ldi	r16, 0x00	; 0
     b68:	10 e0       	ldi	r17, 0x00	; 0
     b6a:	0e 94 65 09 	call	0x12ca	; 0x12ca <get_key>
     b6e:	83 32       	cpi	r24, 0x23	; 35
     b70:	91 f0       	breq	.+36     	; 0xb96 <get_puk_code+0xa4>
     b72:	8a 32       	cpi	r24, 0x2A	; 42
     b74:	09 f4       	brne	.+2      	; 0xb78 <get_puk_code+0x86>
     b76:	7e c0       	rjmp	.+252    	; 0xc74 <get_puk_code+0x182>
     b78:	0a 30       	cpi	r16, 0x0A	; 10
     b7a:	11 05       	cpc	r17, r1
     b7c:	b1 f3       	breq	.-20     	; 0xb6a <get_puk_code+0x78>
     b7e:	f7 01       	movw	r30, r14
     b80:	e0 0f       	add	r30, r16
     b82:	f1 1f       	adc	r31, r17
     b84:	80 83       	st	Z, r24
     b86:	0f 5f       	subi	r16, 0xFF	; 255
     b88:	1f 4f       	sbci	r17, 0xFF	; 255
     b8a:	8a e2       	ldi	r24, 0x2A	; 42
     b8c:	0e 94 1e 01 	call	0x23c	; 0x23c <lcdData>
     b90:	0b 30       	cpi	r16, 0x0B	; 11
     b92:	11 05       	cpc	r17, r1
     b94:	54 f3       	brlt	.-44     	; 0xb6a <get_puk_code+0x78>
     b96:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_cursor_off>
     b9a:	99 81       	ldd	r25, Y+1	; 0x01
     b9c:	90 53       	subi	r25, 0x30	; 48
     b9e:	99 83       	std	Y+1, r25	; 0x01
     ba0:	8a 81       	ldd	r24, Y+2	; 0x02
     ba2:	80 53       	subi	r24, 0x30	; 48
     ba4:	8a 83       	std	Y+2, r24	; 0x02
     ba6:	8b 81       	ldd	r24, Y+3	; 0x03
     ba8:	80 53       	subi	r24, 0x30	; 48
     baa:	8b 83       	std	Y+3, r24	; 0x03
     bac:	8c 81       	ldd	r24, Y+4	; 0x04
     bae:	80 53       	subi	r24, 0x30	; 48
     bb0:	8c 83       	std	Y+4, r24	; 0x04
     bb2:	8d 81       	ldd	r24, Y+5	; 0x05
     bb4:	80 53       	subi	r24, 0x30	; 48
     bb6:	8d 83       	std	Y+5, r24	; 0x05
     bb8:	8e 81       	ldd	r24, Y+6	; 0x06
     bba:	80 53       	subi	r24, 0x30	; 48
     bbc:	8e 83       	std	Y+6, r24	; 0x06
     bbe:	8f 81       	ldd	r24, Y+7	; 0x07
     bc0:	80 53       	subi	r24, 0x30	; 48
     bc2:	8f 83       	std	Y+7, r24	; 0x07
     bc4:	88 85       	ldd	r24, Y+8	; 0x08
     bc6:	80 53       	subi	r24, 0x30	; 48
     bc8:	88 87       	std	Y+8, r24	; 0x08
     bca:	89 85       	ldd	r24, Y+9	; 0x09
     bcc:	80 53       	subi	r24, 0x30	; 48
     bce:	89 87       	std	Y+9, r24	; 0x09
     bd0:	8a 85       	ldd	r24, Y+10	; 0x0a
     bd2:	80 53       	subi	r24, 0x30	; 48
     bd4:	8a 87       	std	Y+10, r24	; 0x0a
     bd6:	0a 30       	cpi	r16, 0x0A	; 10
     bd8:	09 f0       	breq	.+2      	; 0xbdc <get_puk_code+0xea>
     bda:	5a c0       	rjmp	.+180    	; 0xc90 <get_puk_code+0x19e>
     bdc:	8b e1       	ldi	r24, 0x1B	; 27
     bde:	9b 87       	std	Y+11, r25	; 0x0b
     be0:	0e 94 15 09 	call	0x122a	; 0x122a <eeprom_read>
     be4:	9b 85       	ldd	r25, Y+11	; 0x0b
     be6:	98 17       	cp	r25, r24
     be8:	b1 f5       	brne	.+108    	; 0xc56 <get_puk_code+0x164>
     bea:	0a 81       	ldd	r16, Y+2	; 0x02
     bec:	8c e1       	ldi	r24, 0x1C	; 28
     bee:	0e 94 15 09 	call	0x122a	; 0x122a <eeprom_read>
     bf2:	08 17       	cp	r16, r24
     bf4:	81 f5       	brne	.+96     	; 0xc56 <get_puk_code+0x164>
     bf6:	0b 81       	ldd	r16, Y+3	; 0x03
     bf8:	8d e1       	ldi	r24, 0x1D	; 29
     bfa:	0e 94 15 09 	call	0x122a	; 0x122a <eeprom_read>
     bfe:	08 17       	cp	r16, r24
     c00:	51 f5       	brne	.+84     	; 0xc56 <get_puk_code+0x164>
     c02:	0c 81       	ldd	r16, Y+4	; 0x04
     c04:	8e e1       	ldi	r24, 0x1E	; 30
     c06:	0e 94 15 09 	call	0x122a	; 0x122a <eeprom_read>
     c0a:	08 17       	cp	r16, r24
     c0c:	21 f5       	brne	.+72     	; 0xc56 <get_puk_code+0x164>
     c0e:	0d 81       	ldd	r16, Y+5	; 0x05
     c10:	8f e1       	ldi	r24, 0x1F	; 31
     c12:	0e 94 15 09 	call	0x122a	; 0x122a <eeprom_read>
     c16:	08 17       	cp	r16, r24
     c18:	f1 f4       	brne	.+60     	; 0xc56 <get_puk_code+0x164>
     c1a:	0e 81       	ldd	r16, Y+6	; 0x06
     c1c:	80 e2       	ldi	r24, 0x20	; 32
     c1e:	0e 94 15 09 	call	0x122a	; 0x122a <eeprom_read>
     c22:	08 17       	cp	r16, r24
     c24:	c1 f4       	brne	.+48     	; 0xc56 <get_puk_code+0x164>
     c26:	0f 81       	ldd	r16, Y+7	; 0x07
     c28:	81 e2       	ldi	r24, 0x21	; 33
     c2a:	0e 94 15 09 	call	0x122a	; 0x122a <eeprom_read>
     c2e:	08 17       	cp	r16, r24
     c30:	91 f4       	brne	.+36     	; 0xc56 <get_puk_code+0x164>
     c32:	08 85       	ldd	r16, Y+8	; 0x08
     c34:	82 e2       	ldi	r24, 0x22	; 34
     c36:	0e 94 15 09 	call	0x122a	; 0x122a <eeprom_read>
     c3a:	08 17       	cp	r16, r24
     c3c:	61 f4       	brne	.+24     	; 0xc56 <get_puk_code+0x164>
     c3e:	09 85       	ldd	r16, Y+9	; 0x09
     c40:	83 e2       	ldi	r24, 0x23	; 35
     c42:	0e 94 15 09 	call	0x122a	; 0x122a <eeprom_read>
     c46:	08 17       	cp	r16, r24
     c48:	31 f4       	brne	.+12     	; 0xc56 <get_puk_code+0x164>
     c4a:	0a 85       	ldd	r16, Y+10	; 0x0a
     c4c:	84 e2       	ldi	r24, 0x24	; 36
     c4e:	0e 94 15 09 	call	0x122a	; 0x122a <eeprom_read>
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	08 13       	cpse	r16, r24
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	89 2f       	mov	r24, r25
     c5a:	2b 96       	adiw	r28, 0x0b	; 11
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	1f 91       	pop	r17
     c6c:	0f 91       	pop	r16
     c6e:	ff 90       	pop	r15
     c70:	ef 90       	pop	r14
     c72:	08 95       	ret
     c74:	01 15       	cp	r16, r1
     c76:	11 05       	cpc	r17, r1
     c78:	09 f4       	brne	.+2      	; 0xc7c <get_puk_code+0x18a>
     c7a:	77 cf       	rjmp	.-274    	; 0xb6a <get_puk_code+0x78>
     c7c:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_move_cursor_left>
     c80:	80 e2       	ldi	r24, 0x20	; 32
     c82:	0e 94 1e 01 	call	0x23c	; 0x23c <lcdData>
     c86:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_move_cursor_left>
     c8a:	01 50       	subi	r16, 0x01	; 1
     c8c:	10 40       	sbci	r17, 0x00	; 0
     c8e:	80 cf       	rjmp	.-256    	; 0xb90 <get_puk_code+0x9e>
     c90:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
     c94:	80 2f       	mov	r24, r16
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	6d ed       	ldi	r22, 0xDD	; 221
     c9a:	71 e0       	ldi	r23, 0x01	; 1
     c9c:	4a e0       	ldi	r20, 0x0A	; 10
     c9e:	50 e0       	ldi	r21, 0x00	; 0
     ca0:	0e 94 1a 0b 	call	0x1634	; 0x1634 <itoa>
     ca4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     ca8:	8f e3       	ldi	r24, 0x3F	; 63
     caa:	9d e0       	ldi	r25, 0x0D	; 13
     cac:	a3 e0       	ldi	r26, 0x03	; 3
     cae:	81 50       	subi	r24, 0x01	; 1
     cb0:	90 40       	sbci	r25, 0x00	; 0
     cb2:	a0 40       	sbci	r26, 0x00	; 0
     cb4:	e1 f7       	brne	.-8      	; 0xcae <get_puk_code+0x1bc>
     cb6:	00 c0       	rjmp	.+0      	; 0xcb8 <get_puk_code+0x1c6>
     cb8:	00 00       	nop
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	cd cf       	rjmp	.-102    	; 0xc58 <get_puk_code+0x166>

00000cbe <try_again>:
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	89 e1       	ldi	r24, 0x19	; 25
     cc4:	0e 94 15 09 	call	0x122a	; 0x122a <eeprom_read>
     cc8:	68 2f       	mov	r22, r24
     cca:	6f 5f       	subi	r22, 0xFF	; 255
     ccc:	60 93 dc 01 	sts	0x01DC, r22	; 0x8001dc <__data_end>
     cd0:	89 e1       	ldi	r24, 0x19	; 25
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 08 09 	call	0x1210	; 0x1210 <eeprom_write>
     cd8:	89 e1       	ldi	r24, 0x19	; 25
     cda:	0e 94 15 09 	call	0x122a	; 0x122a <eeprom_read>
     cde:	83 30       	cpi	r24, 0x03	; 3
     ce0:	91 f1       	breq	.+100    	; 0xd46 <try_again+0x88>
     ce2:	89 e1       	ldi	r24, 0x19	; 25
     ce4:	0e 94 15 09 	call	0x122a	; 0x122a <eeprom_read>
     ce8:	86 30       	cpi	r24, 0x06	; 6
     cea:	69 f1       	breq	.+90     	; 0xd46 <try_again+0x88>
     cec:	89 e1       	ldi	r24, 0x19	; 25
     cee:	0e 94 15 09 	call	0x122a	; 0x122a <eeprom_read>
     cf2:	89 30       	cpi	r24, 0x09	; 9
     cf4:	08 f4       	brcc	.+2      	; 0xcf8 <try_again+0x3a>
     cf6:	57 c0       	rjmp	.+174    	; 0xda6 <try_again+0xe8>
     cf8:	8a e1       	ldi	r24, 0x1A	; 26
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	6f ef       	ldi	r22, 0xFF	; 255
     cfe:	0e 94 08 09 	call	0x1210	; 0x1210 <eeprom_write>
     d02:	0e 94 79 05 	call	0xaf2	; 0xaf2 <get_puk_code>
     d06:	88 23       	and	r24, r24
     d08:	e1 f3       	breq	.-8      	; 0xd02 <try_again+0x44>
     d0a:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
     d0e:	81 e9       	ldi	r24, 0x91	; 145
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     d16:	8a e1       	ldi	r24, 0x1A	; 26
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	0e 94 08 09 	call	0x1210	; 0x1210 <eeprom_write>
     d20:	89 e1       	ldi	r24, 0x19	; 25
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	0e 94 08 09 	call	0x1210	; 0x1210 <eeprom_write>
     d2a:	8f e3       	ldi	r24, 0x3F	; 63
     d2c:	9d e0       	ldi	r25, 0x0D	; 13
     d2e:	a3 e0       	ldi	r26, 0x03	; 3
     d30:	81 50       	subi	r24, 0x01	; 1
     d32:	90 40       	sbci	r25, 0x00	; 0
     d34:	a0 40       	sbci	r26, 0x00	; 0
     d36:	e1 f7       	brne	.-8      	; 0xd30 <try_again+0x72>
     d38:	00 c0       	rjmp	.+0      	; 0xd3a <try_again+0x7c>
     d3a:	00 00       	nop
     d3c:	0e 94 ab 02 	call	0x556	; 0x556 <sign_up>
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	08 95       	ret
     d46:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	61 e0       	ldi	r22, 0x01	; 1
     d4e:	0e 94 33 01 	call	0x266	; 0x266 <lcd_gotoxy>
     d52:	8e e6       	ldi	r24, 0x6E	; 110
     d54:	91 e0       	ldi	r25, 0x01	; 1
     d56:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	62 e0       	ldi	r22, 0x02	; 2
     d5e:	0e 94 33 01 	call	0x266	; 0x266 <lcd_gotoxy>
     d62:	8d e7       	ldi	r24, 0x7D	; 125
     d64:	91 e0       	ldi	r25, 0x01	; 1
     d66:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     d6a:	cb e3       	ldi	r28, 0x3B	; 59
     d6c:	d0 e0       	ldi	r29, 0x00	; 0
     d6e:	8e e0       	ldi	r24, 0x0E	; 14
     d70:	62 e0       	ldi	r22, 0x02	; 2
     d72:	0e 94 33 01 	call	0x266	; 0x266 <lcd_gotoxy>
     d76:	ce 01       	movw	r24, r28
     d78:	6d ed       	ldi	r22, 0xDD	; 221
     d7a:	71 e0       	ldi	r23, 0x01	; 1
     d7c:	4a e0       	ldi	r20, 0x0A	; 10
     d7e:	50 e0       	ldi	r21, 0x00	; 0
     d80:	0e 94 1a 0b 	call	0x1634	; 0x1634 <itoa>
     d84:	8d ed       	ldi	r24, 0xDD	; 221
     d86:	91 e0       	ldi	r25, 0x01	; 1
     d88:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     d8c:	87 ea       	ldi	r24, 0xA7	; 167
     d8e:	91 e6       	ldi	r25, 0x61	; 97
     d90:	01 97       	sbiw	r24, 0x01	; 1
     d92:	f1 f7       	brne	.-4      	; 0xd90 <try_again+0xd2>
     d94:	00 c0       	rjmp	.+0      	; 0xd96 <try_again+0xd8>
     d96:	00 00       	nop
     d98:	21 97       	sbiw	r28, 0x01	; 1
     d9a:	49 f7       	brne	.-46     	; 0xd6e <try_again+0xb0>
     d9c:	0e 94 ef 06 	call	0xdde	; 0xdde <log_in>
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret
     da6:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	61 e0       	ldi	r22, 0x01	; 1
     dae:	0e 94 33 01 	call	0x266	; 0x266 <lcd_gotoxy>
     db2:	8e e6       	ldi	r24, 0x6E	; 110
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	62 e0       	ldi	r22, 0x02	; 2
     dbe:	0e 94 33 01 	call	0x266	; 0x266 <lcd_gotoxy>
     dc2:	86 ea       	ldi	r24, 0xA6	; 166
     dc4:	91 e0       	ldi	r25, 0x01	; 1
     dc6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     dca:	8f e3       	ldi	r24, 0x3F	; 63
     dcc:	9d e0       	ldi	r25, 0x0D	; 13
     dce:	a3 e0       	ldi	r26, 0x03	; 3
     dd0:	81 50       	subi	r24, 0x01	; 1
     dd2:	90 40       	sbci	r25, 0x00	; 0
     dd4:	a0 40       	sbci	r26, 0x00	; 0
     dd6:	e1 f7       	brne	.-8      	; 0xdd0 <try_again+0x112>
     dd8:	00 c0       	rjmp	.+0      	; 0xdda <try_again+0x11c>
     dda:	00 00       	nop
     ddc:	df cf       	rjmp	.-66     	; 0xd9c <try_again+0xde>

00000dde <log_in>:
     dde:	df 92       	push	r13
     de0:	ef 92       	push	r14
     de2:	ff 92       	push	r15
     de4:	0f 93       	push	r16
     de6:	1f 93       	push	r17
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	2b 97       	sbiw	r28, 0x0b	; 11
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	7e 01       	movw	r14, r28
     dfe:	08 94       	sec
     e00:	e1 1c       	adc	r14, r1
     e02:	f1 1c       	adc	r15, r1
     e04:	8b e0       	ldi	r24, 0x0B	; 11
     e06:	d7 01       	movw	r26, r14
     e08:	1d 92       	st	X+, r1
     e0a:	8a 95       	dec	r24
     e0c:	e9 f7       	brne	.-6      	; 0xe08 <log_in+0x2a>
     e0e:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
     e12:	85 eb       	ldi	r24, 0xB5	; 181
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	62 e0       	ldi	r22, 0x02	; 2
     e1e:	0e 94 33 01 	call	0x266	; 0x266 <lcd_gotoxy>
     e22:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_cursor_on>
     e26:	00 e0       	ldi	r16, 0x00	; 0
     e28:	10 e0       	ldi	r17, 0x00	; 0
     e2a:	0e 94 65 09 	call	0x12ca	; 0x12ca <get_key>
     e2e:	83 32       	cpi	r24, 0x23	; 35
     e30:	89 f0       	breq	.+34     	; 0xe54 <log_in+0x76>
     e32:	8a 32       	cpi	r24, 0x2A	; 42
     e34:	31 f1       	breq	.+76     	; 0xe82 <log_in+0xa4>
     e36:	0a 30       	cpi	r16, 0x0A	; 10
     e38:	11 05       	cpc	r17, r1
     e3a:	b9 f3       	breq	.-18     	; 0xe2a <log_in+0x4c>
     e3c:	f7 01       	movw	r30, r14
     e3e:	e0 0f       	add	r30, r16
     e40:	f1 1f       	adc	r31, r17
     e42:	80 83       	st	Z, r24
     e44:	0f 5f       	subi	r16, 0xFF	; 255
     e46:	1f 4f       	sbci	r17, 0xFF	; 255
     e48:	8a e2       	ldi	r24, 0x2A	; 42
     e4a:	0e 94 1e 01 	call	0x23c	; 0x23c <lcdData>
     e4e:	0b 30       	cpi	r16, 0x0B	; 11
     e50:	11 05       	cpc	r17, r1
     e52:	5c f3       	brlt	.-42     	; 0xe2a <log_in+0x4c>
     e54:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_cursor_off>
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	0e 94 15 09 	call	0x122a	; 0x122a <eeprom_read>
     e5e:	08 17       	cp	r16, r24
     e60:	e9 f0       	breq	.+58     	; 0xe9c <log_in+0xbe>
     e62:	0e 94 5f 06 	call	0xcbe	; 0xcbe <try_again>
     e66:	2b 96       	adiw	r28, 0x0b	; 11
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	ff 90       	pop	r15
     e7c:	ef 90       	pop	r14
     e7e:	df 90       	pop	r13
     e80:	08 95       	ret
     e82:	01 15       	cp	r16, r1
     e84:	11 05       	cpc	r17, r1
     e86:	89 f2       	breq	.-94     	; 0xe2a <log_in+0x4c>
     e88:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_move_cursor_left>
     e8c:	80 e2       	ldi	r24, 0x20	; 32
     e8e:	0e 94 1e 01 	call	0x23c	; 0x23c <lcdData>
     e92:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_move_cursor_left>
     e96:	01 50       	subi	r16, 0x01	; 1
     e98:	10 40       	sbci	r17, 0x00	; 0
     e9a:	d9 cf       	rjmp	.-78     	; 0xe4e <log_in+0x70>
     e9c:	00 23       	and	r16, r16
     e9e:	f1 f0       	breq	.+60     	; 0xedc <log_in+0xfe>
     ea0:	0e 5f       	subi	r16, 0xFE	; 254
     ea2:	12 e0       	ldi	r17, 0x02	; 2
     ea4:	03 c0       	rjmp	.+6      	; 0xeac <log_in+0xce>
     ea6:	1f 5f       	subi	r17, 0xFF	; 255
     ea8:	10 17       	cp	r17, r16
     eaa:	c1 f0       	breq	.+48     	; 0xedc <log_in+0xfe>
     eac:	f7 01       	movw	r30, r14
     eae:	d1 90       	ld	r13, Z+
     eb0:	7f 01       	movw	r14, r30
     eb2:	81 2f       	mov	r24, r17
     eb4:	0e 94 15 09 	call	0x122a	; 0x122a <eeprom_read>
     eb8:	d8 16       	cp	r13, r24
     eba:	a9 f3       	breq	.-22     	; 0xea6 <log_in+0xc8>
     ebc:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
     ec0:	8e e1       	ldi	r24, 0x1E	; 30
     ec2:	91 e0       	ldi	r25, 0x01	; 1
     ec4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     ec8:	8f e3       	ldi	r24, 0x3F	; 63
     eca:	9d e0       	ldi	r25, 0x0D	; 13
     ecc:	a3 e0       	ldi	r26, 0x03	; 3
     ece:	81 50       	subi	r24, 0x01	; 1
     ed0:	90 40       	sbci	r25, 0x00	; 0
     ed2:	a0 40       	sbci	r26, 0x00	; 0
     ed4:	e1 f7       	brne	.-8      	; 0xece <log_in+0xf0>
     ed6:	00 c0       	rjmp	.+0      	; 0xed8 <log_in+0xfa>
     ed8:	00 00       	nop
     eda:	c3 cf       	rjmp	.-122    	; 0xe62 <log_in+0x84>
     edc:	82 e4       	ldi	r24, 0x42	; 66
     ede:	63 e0       	ldi	r22, 0x03	; 3
     ee0:	41 e0       	ldi	r20, 0x01	; 1
     ee2:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_write>
     ee6:	82 e4       	ldi	r24, 0x42	; 66
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	41 e0       	ldi	r20, 0x01	; 1
     eec:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_write>
     ef0:	82 e4       	ldi	r24, 0x42	; 66
     ef2:	61 e0       	ldi	r22, 0x01	; 1
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_write>
     efa:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
     efe:	84 e2       	ldi	r24, 0x24	; 36
     f00:	91 e0       	ldi	r25, 0x01	; 1
     f02:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
     f06:	8f e7       	ldi	r24, 0x7F	; 127
     f08:	9a e1       	ldi	r25, 0x1A	; 26
     f0a:	a6 e0       	ldi	r26, 0x06	; 6
     f0c:	81 50       	subi	r24, 0x01	; 1
     f0e:	90 40       	sbci	r25, 0x00	; 0
     f10:	a0 40       	sbci	r26, 0x00	; 0
     f12:	e1 f7       	brne	.-8      	; 0xf0c <log_in+0x12e>
     f14:	00 c0       	rjmp	.+0      	; 0xf16 <log_in+0x138>
     f16:	00 00       	nop
     f18:	82 e4       	ldi	r24, 0x42	; 66
     f1a:	63 e0       	ldi	r22, 0x03	; 3
     f1c:	40 e0       	ldi	r20, 0x00	; 0
     f1e:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_write>
     f22:	89 e1       	ldi	r24, 0x19	; 25
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	60 e0       	ldi	r22, 0x00	; 0
     f28:	0e 94 08 09 	call	0x1210	; 0x1210 <eeprom_write>
     f2c:	9c cf       	rjmp	.-200    	; 0xe66 <log_in+0x88>

00000f2e <adc_init>:

//****************************************************************************
//This function enables ADC module
void adc_init(unsigned char prescaler, unsigned char vref, unsigned char location)
{
	ADCSRA |= (1<<ADEN); //enable ADC
     f2e:	37 9a       	sbi	0x06, 7	; 6
//****************************************************************************
//This function selects the conversion time of the ADC
//NB: for no prescaler enter "1"
void adc_clkPrescaler(unsigned char prescaler)
{
	ADCSRA &= (~(1<<ADPS0)) & (~(1<<ADPS1)) & (~(1<<ADPS2)); // clear ADPS2:ADPS0 for initialization
     f30:	96 b1       	in	r25, 0x06	; 6
     f32:	98 7f       	andi	r25, 0xF8	; 248
     f34:	96 b9       	out	0x06, r25	; 6
	
	switch(prescaler)
     f36:	80 31       	cpi	r24, 0x10	; 16
     f38:	09 f4       	brne	.+2      	; 0xf3c <adc_init+0xe>
     f3a:	3f c0       	rjmp	.+126    	; 0xfba <adc_init+0x8c>
     f3c:	c0 f0       	brcs	.+48     	; 0xf6e <adc_init+0x40>
     f3e:	80 34       	cpi	r24, 0x40	; 64
     f40:	91 f1       	breq	.+100    	; 0xfa6 <adc_init+0x78>
     f42:	80 38       	cpi	r24, 0x80	; 128
     f44:	49 f1       	breq	.+82     	; 0xf98 <adc_init+0x6a>
     f46:	80 32       	cpi	r24, 0x20	; 32
     f48:	91 f1       	breq	.+100    	; 0xfae <adc_init+0x80>
			break;
		case 128:
			ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
			break;
		default:
			ADCSRA |= 0x00;			//don't change any thing if no prescalar
     f4a:	86 b1       	in	r24, 0x06	; 6
     f4c:	86 b9       	out	0x06, r24	; 6
}
//****************************************************************************
//This function selects the voltage reference
void adc_voltageReference(unsigned char Vref)
{
	ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1)); // clear REFS1:REFS0 for initialization
     f4e:	87 b1       	in	r24, 0x07	; 7
     f50:	8f 73       	andi	r24, 0x3F	; 63
     f52:	87 b9       	out	0x07, r24	; 7
	
	switch(Vref)
     f54:	61 30       	cpi	r22, 0x01	; 1
     f56:	b9 f0       	breq	.+46     	; 0xf86 <adc_init+0x58>
     f58:	61 30       	cpi	r22, 0x01	; 1
     f5a:	10 f1       	brcs	.+68     	; 0xfa0 <adc_init+0x72>
     f5c:	62 30       	cpi	r22, 0x02	; 2
     f5e:	01 f5       	brne	.+64     	; 0xfa0 <adc_init+0x72>
			break;
		case AVCC:
			ADMUX |= (1<<REFS0);
			break;
		case INTERNAL:
			ADMUX |= (1<<REFS0) | (1<<REFS1);
     f60:	87 b1       	in	r24, 0x07	; 7
     f62:	80 6c       	ori	r24, 0xC0	; 192
     f64:	87 b9       	out	0x07, r24	; 7
void adc_init(unsigned char prescaler, unsigned char vref, unsigned char location)
{
	ADCSRA |= (1<<ADEN); //enable ADC
	adc_clkPrescaler(prescaler);
	adc_voltageReference(vref);
	location ? (ADMUX |= (1<<ADLAR)) : (ADMUX &= ~(1<<ADLAR)); // If true location is left-justified and vice versa
     f66:	41 11       	cpse	r20, r1
     f68:	11 c0       	rjmp	.+34     	; 0xf8c <adc_init+0x5e>
     f6a:	3d 98       	cbi	0x07, 5	; 7
     f6c:	08 95       	ret
//NB: for no prescaler enter "1"
void adc_clkPrescaler(unsigned char prescaler)
{
	ADCSRA &= (~(1<<ADPS0)) & (~(1<<ADPS1)) & (~(1<<ADPS2)); // clear ADPS2:ADPS0 for initialization
	
	switch(prescaler)
     f6e:	84 30       	cpi	r24, 0x04	; 4
     f70:	11 f1       	breq	.+68     	; 0xfb6 <adc_init+0x88>
     f72:	88 30       	cpi	r24, 0x08	; 8
     f74:	69 f0       	breq	.+26     	; 0xf90 <adc_init+0x62>
     f76:	82 30       	cpi	r24, 0x02	; 2
     f78:	41 f7       	brne	.-48     	; 0xf4a <adc_init+0x1c>
	{
		case 2:
			ADCSRA |= (1<<ADPS0);
     f7a:	30 9a       	sbi	0x06, 0	; 6
}
//****************************************************************************
//This function selects the voltage reference
void adc_voltageReference(unsigned char Vref)
{
	ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1)); // clear REFS1:REFS0 for initialization
     f7c:	87 b1       	in	r24, 0x07	; 7
     f7e:	8f 73       	andi	r24, 0x3F	; 63
     f80:	87 b9       	out	0x07, r24	; 7
	
	switch(Vref)
     f82:	61 30       	cpi	r22, 0x01	; 1
     f84:	49 f7       	brne	.-46     	; 0xf58 <adc_init+0x2a>
	{
		case AREF:
			ADMUX |= 0x00;
			break;
		case AVCC:
			ADMUX |= (1<<REFS0);
     f86:	3e 9a       	sbi	0x07, 6	; 7
void adc_init(unsigned char prescaler, unsigned char vref, unsigned char location)
{
	ADCSRA |= (1<<ADEN); //enable ADC
	adc_clkPrescaler(prescaler);
	adc_voltageReference(vref);
	location ? (ADMUX |= (1<<ADLAR)) : (ADMUX &= ~(1<<ADLAR)); // If true location is left-justified and vice versa
     f88:	44 23       	and	r20, r20
     f8a:	79 f3       	breq	.-34     	; 0xf6a <adc_init+0x3c>
     f8c:	3d 9a       	sbi	0x07, 5	; 7
     f8e:	08 95       	ret
			break;
		case 4:
			ADCSRA |= (1<<ADPS1);
			break;
		case 8:
			ADCSRA |= (1<<ADPS0) | (1<<ADPS1);
     f90:	86 b1       	in	r24, 0x06	; 6
     f92:	83 60       	ori	r24, 0x03	; 3
     f94:	86 b9       	out	0x06, r24	; 6
     f96:	db cf       	rjmp	.-74     	; 0xf4e <adc_init+0x20>
			break;
		case 64:
			ADCSRA |= (1<<ADPS1) | (1<<ADPS2);
			break;
		case 128:
			ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
     f98:	86 b1       	in	r24, 0x06	; 6
     f9a:	87 60       	ori	r24, 0x07	; 7
     f9c:	86 b9       	out	0x06, r24	; 6
     f9e:	d7 cf       	rjmp	.-82     	; 0xf4e <adc_init+0x20>
			break;
		case INTERNAL:
			ADMUX |= (1<<REFS0) | (1<<REFS1);
			break;
		default:
			ADMUX |= 0x00;
     fa0:	87 b1       	in	r24, 0x07	; 7
     fa2:	87 b9       	out	0x07, r24	; 7
     fa4:	e0 cf       	rjmp	.-64     	; 0xf66 <adc_init+0x38>
			break;
		case 32:
			ADCSRA |= (1<<ADPS0) | (1<<ADPS2);
			break;
		case 64:
			ADCSRA |= (1<<ADPS1) | (1<<ADPS2);
     fa6:	86 b1       	in	r24, 0x06	; 6
     fa8:	86 60       	ori	r24, 0x06	; 6
     faa:	86 b9       	out	0x06, r24	; 6
     fac:	d0 cf       	rjmp	.-96     	; 0xf4e <adc_init+0x20>
			break;
		case 16:
			ADCSRA |= (1<<ADPS2);
			break;
		case 32:
			ADCSRA |= (1<<ADPS0) | (1<<ADPS2);
     fae:	86 b1       	in	r24, 0x06	; 6
     fb0:	85 60       	ori	r24, 0x05	; 5
     fb2:	86 b9       	out	0x06, r24	; 6
     fb4:	cc cf       	rjmp	.-104    	; 0xf4e <adc_init+0x20>
	{
		case 2:
			ADCSRA |= (1<<ADPS0);
			break;
		case 4:
			ADCSRA |= (1<<ADPS1);
     fb6:	31 9a       	sbi	0x06, 1	; 6
     fb8:	ca cf       	rjmp	.-108    	; 0xf4e <adc_init+0x20>
			break;
		case 8:
			ADCSRA |= (1<<ADPS0) | (1<<ADPS1);
			break;
		case 16:
			ADCSRA |= (1<<ADPS2);
     fba:	32 9a       	sbi	0x06, 2	; 6
     fbc:	c8 cf       	rjmp	.-112    	; 0xf4e <adc_init+0x20>

00000fbe <DIO_pinmode>:

//This function sets the pin_number to either OUTPUT or INPUT

void DIO_pinmode(unsigned char port_char, unsigned char pin_number, unsigned char state)
{
	switch (port_char)
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	fc 01       	movw	r30, r24
     fc2:	e1 54       	subi	r30, 0x41	; 65
     fc4:	f1 09       	sbc	r31, r1
     fc6:	e4 32       	cpi	r30, 0x24	; 36
     fc8:	f1 05       	cpc	r31, r1
     fca:	a8 f4       	brcc	.+42     	; 0xff6 <DIO_pinmode+0x38>
     fcc:	e6 5d       	subi	r30, 0xD6	; 214
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__tablejump2__>
			DDRC |= (1 << pin_number);
		break;
		
		case 'D':
		case 'd':
		if(state == INPUT)
     fd4:	44 23       	and	r20, r20
     fd6:	09 f4       	brne	.+2      	; 0xfda <DIO_pinmode+0x1c>
     fd8:	4e c0       	rjmp	.+156    	; 0x1076 <DIO_pinmode+0xb8>
			DDRD &= ~(1 << pin_number);
		else if (state == INPUT_PULLUP)
     fda:	42 30       	cpi	r20, 0x02	; 2
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <DIO_pinmode+0x22>
     fde:	8a c0       	rjmp	.+276    	; 0x10f4 <DIO_pinmode+0x136>
		{
			DDRD &= ~(1 << pin_number);
			PORTD |= (1 << pin_number);			
		}			
		else if (state == OUTPUT)
     fe0:	41 30       	cpi	r20, 0x01	; 1
     fe2:	49 f4       	brne	.+18     	; 0xff6 <DIO_pinmode+0x38>
			DDRD |= (1 << pin_number);
     fe4:	21 b3       	in	r18, 0x11	; 17
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	01 c0       	rjmp	.+2      	; 0xfee <DIO_pinmode+0x30>
     fec:	88 0f       	add	r24, r24
     fee:	6a 95       	dec	r22
     ff0:	ea f7       	brpl	.-6      	; 0xfec <DIO_pinmode+0x2e>
     ff2:	82 2b       	or	r24, r18
     ff4:	81 bb       	out	0x11, r24	; 17
     ff6:	08 95       	ret
			DDRB |= (1 << pin_number);		
		break;
		
		case 'C':
		case 'c':
		if(state == INPUT)
     ff8:	44 23       	and	r20, r20
     ffa:	91 f1       	breq	.+100    	; 0x1060 <DIO_pinmode+0xa2>
			DDRC &= ~(1 << pin_number);
		else if (state == INPUT_PULLUP)
     ffc:	42 30       	cpi	r20, 0x02	; 2
     ffe:	09 f4       	brne	.+2      	; 0x1002 <DIO_pinmode+0x44>
    1000:	88 c0       	rjmp	.+272    	; 0x1112 <DIO_pinmode+0x154>
		{
			DDRC &= ~(1 << pin_number);
			PORTC |= (1 << pin_number);
		}			
		else if (state == OUTPUT)
    1002:	41 30       	cpi	r20, 0x01	; 1
    1004:	c1 f7       	brne	.-16     	; 0xff6 <DIO_pinmode+0x38>
			DDRC |= (1 << pin_number);
    1006:	24 b3       	in	r18, 0x14	; 20
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	01 c0       	rjmp	.+2      	; 0x1010 <DIO_pinmode+0x52>
    100e:	88 0f       	add	r24, r24
    1010:	6a 95       	dec	r22
    1012:	ea f7       	brpl	.-6      	; 0x100e <DIO_pinmode+0x50>
    1014:	82 2b       	or	r24, r18
    1016:	84 bb       	out	0x14, r24	; 20
    1018:	08 95       	ret
			DDRA |= (1 << pin_number);
		break;

		case 'B':
		case 'b':
		if(state == INPUT)
    101a:	44 23       	and	r20, r20
    101c:	09 f4       	brne	.+2      	; 0x1020 <DIO_pinmode+0x62>
    101e:	41 c0       	rjmp	.+130    	; 0x10a2 <DIO_pinmode+0xe4>
			DDRB &= ~(1 << pin_number);
		else if (state == INPUT_PULLUP)
    1020:	42 30       	cpi	r20, 0x02	; 2
    1022:	09 f4       	brne	.+2      	; 0x1026 <DIO_pinmode+0x68>
    1024:	49 c0       	rjmp	.+146    	; 0x10b8 <DIO_pinmode+0xfa>
		{
			DDRB &= ~(1 << pin_number);
			PORTB |= (1 << pin_number);		
		}				
		else if (state == OUTPUT)
    1026:	41 30       	cpi	r20, 0x01	; 1
    1028:	31 f7       	brne	.-52     	; 0xff6 <DIO_pinmode+0x38>
			DDRB |= (1 << pin_number);		
    102a:	27 b3       	in	r18, 0x17	; 23
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <DIO_pinmode+0x76>
    1032:	88 0f       	add	r24, r24
    1034:	6a 95       	dec	r22
    1036:	ea f7       	brpl	.-6      	; 0x1032 <DIO_pinmode+0x74>
    1038:	82 2b       	or	r24, r18
    103a:	87 bb       	out	0x17, r24	; 23
    103c:	08 95       	ret
{
	switch (port_char)
	{
		case 'A':
		case 'a':
		if(state == INPUT)
    103e:	44 23       	and	r20, r20
    1040:	29 f1       	breq	.+74     	; 0x108c <DIO_pinmode+0xce>
			DDRA &= ~(1 << pin_number);
		else if (state == INPUT_PULLUP)
    1042:	42 30       	cpi	r20, 0x02	; 2
    1044:	09 f4       	brne	.+2      	; 0x1048 <DIO_pinmode+0x8a>
    1046:	47 c0       	rjmp	.+142    	; 0x10d6 <DIO_pinmode+0x118>
		{
			DDRA &= ~(1 << pin_number);
			PORTA |= (1 << pin_number);
		}			
		else if (state == OUTPUT)
    1048:	41 30       	cpi	r20, 0x01	; 1
    104a:	a9 f6       	brne	.-86     	; 0xff6 <DIO_pinmode+0x38>
			DDRA |= (1 << pin_number);
    104c:	2a b3       	in	r18, 0x1a	; 26
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	01 c0       	rjmp	.+2      	; 0x1056 <DIO_pinmode+0x98>
    1054:	88 0f       	add	r24, r24
    1056:	6a 95       	dec	r22
    1058:	ea f7       	brpl	.-6      	; 0x1054 <DIO_pinmode+0x96>
    105a:	82 2b       	or	r24, r18
    105c:	8a bb       	out	0x1a, r24	; 26
    105e:	08 95       	ret
		break;
		
		case 'C':
		case 'c':
		if(state == INPUT)
			DDRC &= ~(1 << pin_number);
    1060:	24 b3       	in	r18, 0x14	; 20
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	01 c0       	rjmp	.+2      	; 0x106a <DIO_pinmode+0xac>
    1068:	88 0f       	add	r24, r24
    106a:	6a 95       	dec	r22
    106c:	ea f7       	brpl	.-6      	; 0x1068 <DIO_pinmode+0xaa>
    106e:	80 95       	com	r24
    1070:	82 23       	and	r24, r18
    1072:	84 bb       	out	0x14, r24	; 20
    1074:	08 95       	ret
		break;
		
		case 'D':
		case 'd':
		if(state == INPUT)
			DDRD &= ~(1 << pin_number);
    1076:	21 b3       	in	r18, 0x11	; 17
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	01 c0       	rjmp	.+2      	; 0x1080 <DIO_pinmode+0xc2>
    107e:	88 0f       	add	r24, r24
    1080:	6a 95       	dec	r22
    1082:	ea f7       	brpl	.-6      	; 0x107e <DIO_pinmode+0xc0>
    1084:	80 95       	com	r24
    1086:	82 23       	and	r24, r18
    1088:	81 bb       	out	0x11, r24	; 17
    108a:	08 95       	ret
	switch (port_char)
	{
		case 'A':
		case 'a':
		if(state == INPUT)
			DDRA &= ~(1 << pin_number);
    108c:	2a b3       	in	r18, 0x1a	; 26
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	01 c0       	rjmp	.+2      	; 0x1096 <DIO_pinmode+0xd8>
    1094:	88 0f       	add	r24, r24
    1096:	6a 95       	dec	r22
    1098:	ea f7       	brpl	.-6      	; 0x1094 <DIO_pinmode+0xd6>
    109a:	80 95       	com	r24
    109c:	82 23       	and	r24, r18
    109e:	8a bb       	out	0x1a, r24	; 26
    10a0:	08 95       	ret
		break;

		case 'B':
		case 'b':
		if(state == INPUT)
			DDRB &= ~(1 << pin_number);
    10a2:	27 b3       	in	r18, 0x17	; 23
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	01 c0       	rjmp	.+2      	; 0x10ac <DIO_pinmode+0xee>
    10aa:	88 0f       	add	r24, r24
    10ac:	6a 95       	dec	r22
    10ae:	ea f7       	brpl	.-6      	; 0x10aa <DIO_pinmode+0xec>
    10b0:	80 95       	com	r24
    10b2:	82 23       	and	r24, r18
    10b4:	87 bb       	out	0x17, r24	; 23
    10b6:	08 95       	ret
		else if (state == INPUT_PULLUP)
		{
			DDRB &= ~(1 << pin_number);
    10b8:	27 b3       	in	r18, 0x17	; 23
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	01 c0       	rjmp	.+2      	; 0x10c2 <DIO_pinmode+0x104>
    10c0:	88 0f       	add	r24, r24
    10c2:	6a 95       	dec	r22
    10c4:	ea f7       	brpl	.-6      	; 0x10c0 <DIO_pinmode+0x102>
    10c6:	98 2f       	mov	r25, r24
    10c8:	90 95       	com	r25
    10ca:	92 23       	and	r25, r18
    10cc:	97 bb       	out	0x17, r25	; 23
			PORTB |= (1 << pin_number);		
    10ce:	98 b3       	in	r25, 0x18	; 24
    10d0:	89 2b       	or	r24, r25
    10d2:	88 bb       	out	0x18, r24	; 24
    10d4:	08 95       	ret
		case 'a':
		if(state == INPUT)
			DDRA &= ~(1 << pin_number);
		else if (state == INPUT_PULLUP)
		{
			DDRA &= ~(1 << pin_number);
    10d6:	2a b3       	in	r18, 0x1a	; 26
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	01 c0       	rjmp	.+2      	; 0x10e0 <DIO_pinmode+0x122>
    10de:	88 0f       	add	r24, r24
    10e0:	6a 95       	dec	r22
    10e2:	ea f7       	brpl	.-6      	; 0x10de <DIO_pinmode+0x120>
    10e4:	98 2f       	mov	r25, r24
    10e6:	90 95       	com	r25
    10e8:	92 23       	and	r25, r18
    10ea:	9a bb       	out	0x1a, r25	; 26
			PORTA |= (1 << pin_number);
    10ec:	9b b3       	in	r25, 0x1b	; 27
    10ee:	89 2b       	or	r24, r25
    10f0:	8b bb       	out	0x1b, r24	; 27
    10f2:	08 95       	ret
		case 'd':
		if(state == INPUT)
			DDRD &= ~(1 << pin_number);
		else if (state == INPUT_PULLUP)
		{
			DDRD &= ~(1 << pin_number);
    10f4:	21 b3       	in	r18, 0x11	; 17
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	01 c0       	rjmp	.+2      	; 0x10fe <DIO_pinmode+0x140>
    10fc:	88 0f       	add	r24, r24
    10fe:	6a 95       	dec	r22
    1100:	ea f7       	brpl	.-6      	; 0x10fc <DIO_pinmode+0x13e>
    1102:	98 2f       	mov	r25, r24
    1104:	90 95       	com	r25
    1106:	92 23       	and	r25, r18
    1108:	91 bb       	out	0x11, r25	; 17
			PORTD |= (1 << pin_number);			
    110a:	92 b3       	in	r25, 0x12	; 18
    110c:	89 2b       	or	r24, r25
    110e:	82 bb       	out	0x12, r24	; 18
    1110:	08 95       	ret
		case 'c':
		if(state == INPUT)
			DDRC &= ~(1 << pin_number);
		else if (state == INPUT_PULLUP)
		{
			DDRC &= ~(1 << pin_number);
    1112:	24 b3       	in	r18, 0x14	; 20
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	01 c0       	rjmp	.+2      	; 0x111c <DIO_pinmode+0x15e>
    111a:	88 0f       	add	r24, r24
    111c:	6a 95       	dec	r22
    111e:	ea f7       	brpl	.-6      	; 0x111a <DIO_pinmode+0x15c>
    1120:	98 2f       	mov	r25, r24
    1122:	90 95       	com	r25
    1124:	92 23       	and	r25, r18
    1126:	94 bb       	out	0x14, r25	; 20
			PORTC |= (1 << pin_number);
    1128:	95 b3       	in	r25, 0x15	; 21
    112a:	89 2b       	or	r24, r25
    112c:	85 bb       	out	0x15, r24	; 21
    112e:	08 95       	ret

00001130 <DIO_write>:

//This function writes on pin number either HIGH or LOW

void DIO_write(unsigned char port_char, unsigned char pin_number, unsigned char logic_level)
{
		switch (port_char)
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	fc 01       	movw	r30, r24
    1134:	e1 54       	subi	r30, 0x41	; 65
    1136:	f1 09       	sbc	r31, r1
    1138:	e4 32       	cpi	r30, 0x24	; 36
    113a:	f1 05       	cpc	r31, r1
    113c:	90 f4       	brcc	.+36     	; 0x1162 <DIO_write+0x32>
    113e:	e2 5b       	subi	r30, 0xB2	; 178
    1140:	ff 4f       	sbci	r31, 0xFF	; 255
    1142:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__tablejump2__>
				PORTC |= (1 << pin_number);
			break;
			
			case 'D':
			case 'd':
			if(logic_level == LOW)
    1146:	44 23       	and	r20, r20
    1148:	09 f4       	brne	.+2      	; 0x114c <DIO_write+0x1c>
    114a:	41 c0       	rjmp	.+130    	; 0x11ce <DIO_write+0x9e>
				PORTD &= ~(1 << pin_number);
			else if (logic_level == HIGH)
    114c:	41 30       	cpi	r20, 0x01	; 1
    114e:	49 f4       	brne	.+18     	; 0x1162 <DIO_write+0x32>
				PORTD |= (1 << pin_number);
    1150:	22 b3       	in	r18, 0x12	; 18
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	01 c0       	rjmp	.+2      	; 0x115a <DIO_write+0x2a>
    1158:	88 0f       	add	r24, r24
    115a:	6a 95       	dec	r22
    115c:	ea f7       	brpl	.-6      	; 0x1158 <DIO_write+0x28>
    115e:	82 2b       	or	r24, r18
    1160:	82 bb       	out	0x12, r24	; 18
    1162:	08 95       	ret
				PORTB |= (1 << pin_number);
			break;

			case 'C':
			case 'c':
			if(logic_level == LOW)
    1164:	44 23       	and	r20, r20
    1166:	41 f1       	breq	.+80     	; 0x11b8 <DIO_write+0x88>
				PORTC &= ~(1 << pin_number);
			else if (logic_level == HIGH)
    1168:	41 30       	cpi	r20, 0x01	; 1
    116a:	d9 f7       	brne	.-10     	; 0x1162 <DIO_write+0x32>
				PORTC |= (1 << pin_number);
    116c:	25 b3       	in	r18, 0x15	; 21
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	01 c0       	rjmp	.+2      	; 0x1176 <DIO_write+0x46>
    1174:	88 0f       	add	r24, r24
    1176:	6a 95       	dec	r22
    1178:	ea f7       	brpl	.-6      	; 0x1174 <DIO_write+0x44>
    117a:	82 2b       	or	r24, r18
    117c:	85 bb       	out	0x15, r24	; 21
    117e:	08 95       	ret
				PORTA |= (1 << pin_number);
			break;

			case 'B':
			case 'b':
			if(logic_level == LOW)
    1180:	44 23       	and	r20, r20
    1182:	d9 f1       	breq	.+118    	; 0x11fa <DIO_write+0xca>
				PORTB &= ~(1 << pin_number);
			else if (logic_level == HIGH)
    1184:	41 30       	cpi	r20, 0x01	; 1
    1186:	69 f7       	brne	.-38     	; 0x1162 <DIO_write+0x32>
				PORTB |= (1 << pin_number);
    1188:	28 b3       	in	r18, 0x18	; 24
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	01 c0       	rjmp	.+2      	; 0x1192 <DIO_write+0x62>
    1190:	88 0f       	add	r24, r24
    1192:	6a 95       	dec	r22
    1194:	ea f7       	brpl	.-6      	; 0x1190 <DIO_write+0x60>
    1196:	82 2b       	or	r24, r18
    1198:	88 bb       	out	0x18, r24	; 24
    119a:	08 95       	ret
{
		switch (port_char)
		{
			case 'A':
			case 'a':
			if(logic_level == LOW)
    119c:	44 23       	and	r20, r20
    119e:	11 f1       	breq	.+68     	; 0x11e4 <DIO_write+0xb4>
				PORTA &= ~(1 << pin_number);
			else if (logic_level == HIGH)
    11a0:	41 30       	cpi	r20, 0x01	; 1
    11a2:	f9 f6       	brne	.-66     	; 0x1162 <DIO_write+0x32>
				PORTA |= (1 << pin_number);
    11a4:	2b b3       	in	r18, 0x1b	; 27
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	01 c0       	rjmp	.+2      	; 0x11ae <DIO_write+0x7e>
    11ac:	88 0f       	add	r24, r24
    11ae:	6a 95       	dec	r22
    11b0:	ea f7       	brpl	.-6      	; 0x11ac <DIO_write+0x7c>
    11b2:	82 2b       	or	r24, r18
    11b4:	8b bb       	out	0x1b, r24	; 27
    11b6:	08 95       	ret
			break;

			case 'C':
			case 'c':
			if(logic_level == LOW)
				PORTC &= ~(1 << pin_number);
    11b8:	25 b3       	in	r18, 0x15	; 21
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <DIO_write+0x92>
    11c0:	88 0f       	add	r24, r24
    11c2:	6a 95       	dec	r22
    11c4:	ea f7       	brpl	.-6      	; 0x11c0 <DIO_write+0x90>
    11c6:	80 95       	com	r24
    11c8:	82 23       	and	r24, r18
    11ca:	85 bb       	out	0x15, r24	; 21
    11cc:	08 95       	ret
			break;
			
			case 'D':
			case 'd':
			if(logic_level == LOW)
				PORTD &= ~(1 << pin_number);
    11ce:	22 b3       	in	r18, 0x12	; 18
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	01 c0       	rjmp	.+2      	; 0x11d8 <DIO_write+0xa8>
    11d6:	88 0f       	add	r24, r24
    11d8:	6a 95       	dec	r22
    11da:	ea f7       	brpl	.-6      	; 0x11d6 <DIO_write+0xa6>
    11dc:	80 95       	com	r24
    11de:	82 23       	and	r24, r18
    11e0:	82 bb       	out	0x12, r24	; 18
    11e2:	08 95       	ret
		switch (port_char)
		{
			case 'A':
			case 'a':
			if(logic_level == LOW)
				PORTA &= ~(1 << pin_number);
    11e4:	2b b3       	in	r18, 0x1b	; 27
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	01 c0       	rjmp	.+2      	; 0x11ee <DIO_write+0xbe>
    11ec:	88 0f       	add	r24, r24
    11ee:	6a 95       	dec	r22
    11f0:	ea f7       	brpl	.-6      	; 0x11ec <DIO_write+0xbc>
    11f2:	80 95       	com	r24
    11f4:	82 23       	and	r24, r18
    11f6:	8b bb       	out	0x1b, r24	; 27
    11f8:	08 95       	ret
			break;

			case 'B':
			case 'b':
			if(logic_level == LOW)
				PORTB &= ~(1 << pin_number);
    11fa:	28 b3       	in	r18, 0x18	; 24
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	01 c0       	rjmp	.+2      	; 0x1204 <DIO_write+0xd4>
    1202:	88 0f       	add	r24, r24
    1204:	6a 95       	dec	r22
    1206:	ea f7       	brpl	.-6      	; 0x1202 <DIO_write+0xd2>
    1208:	80 95       	com	r24
    120a:	82 23       	and	r24, r18
    120c:	88 bb       	out	0x18, r24	; 24
    120e:	08 95       	ret

00001210 <eeprom_write>:
#include <avr/io.h>
#include "EEPROM.h"

void eeprom_write(unsigned int address, unsigned char data)
{
	while((EECR & (1 << EEWE)) == 1);			//Wait for EEWE = 0, Which means that EEPROM is ready for read or write
    1210:	2c b3       	in	r18, 0x1c	; 28
	EEAR = address;							//Put the address in which you want to put the byte
    1212:	9f bb       	out	0x1f, r25	; 31
    1214:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;							//Put the desired byte
    1216:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1 << EEMWE);					//Set EEMWE to 1
    1218:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= (1 << EEWE);					//Set EEWE to 1 within 4 clock cycles (EEMWE will be cleared after 4 clock cycles)
    121a:	e1 9a       	sbi	0x1c, 1	; 28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    121c:	87 ea       	ldi	r24, 0xA7	; 167
    121e:	91 e6       	ldi	r25, 0x61	; 97
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	f1 f7       	brne	.-4      	; 0x1220 <eeprom_write+0x10>
    1224:	00 c0       	rjmp	.+0      	; 0x1226 <eeprom_write+0x16>
    1226:	00 00       	nop
    1228:	08 95       	ret

0000122a <eeprom_read>:
	_delay_ms(100);
}

unsigned char eeprom_read(unsigned char address)
{
	while((EECR & (1 << EEWE)) == 1);			//Wait for EEWE = 0, Which means that EEPROM is ready for read or write
    122a:	9c b3       	in	r25, 0x1c	; 28
	EEAR = address;							//Put the address of byte you want to read
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	9f bb       	out	0x1f, r25	; 31
    1230:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1 << EERE);					//Set EERE to 1
    1232:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;							//Return the desired byte
    1234:	8d b3       	in	r24, 0x1d	; 29
    1236:	08 95       	ret

00001238 <set_externalInterrupt>:
#include <avr/io.h>
#include "external_interrupts.h"

void set_externalInterrupt(unsigned char interrupt_num, unsigned char state)
{
	switch(interrupt_num)
    1238:	86 30       	cpi	r24, 0x06	; 6
    123a:	c9 f0       	breq	.+50     	; 0x126e <set_externalInterrupt+0x36>
    123c:	87 30       	cpi	r24, 0x07	; 7
    123e:	59 f0       	breq	.+22     	; 0x1256 <set_externalInterrupt+0x1e>
    1240:	85 30       	cpi	r24, 0x05	; 5
    1242:	09 f0       	breq	.+2      	; 0x1246 <set_externalInterrupt+0xe>
    1244:	08 95       	ret
				MCUCR |= (1 << ISC10) | (1 << ISC11);
			GICR |= (1 << INT1);
		break;
		
		case INT2:
			if (state == FALLING_EDGE)
    1246:	63 30       	cpi	r22, 0x03	; 3
    1248:	41 f1       	breq	.+80     	; 0x129a <set_externalInterrupt+0x62>
				MCUCR &= ~(1 << ISC2);
			else if (state == RISING_EDGE)
    124a:	62 30       	cpi	r22, 0x02	; 2
    124c:	51 f1       	breq	.+84     	; 0x12a2 <set_externalInterrupt+0x6a>
				MCUCR |= (1 << ISC2);
			GICR |= (1 << INT2);
    124e:	8b b7       	in	r24, 0x3b	; 59
    1250:	80 62       	ori	r24, 0x20	; 32
    1252:	8b bf       	out	0x3b, r24	; 59
    1254:	08 95       	ret
				MCUCR |= ((1 << ISC00) | (1 << ISC01));	
			GICR |= (1 << INT0);
		break;
		
		case INT1:
			if (state == LOW_LEVEL)
    1256:	66 23       	and	r22, r22
    1258:	d9 f0       	breq	.+54     	; 0x1290 <set_externalInterrupt+0x58>
				MCUCR = 0x00;
			else if (state == CHANGE)
    125a:	61 30       	cpi	r22, 0x01	; 1
    125c:	31 f1       	breq	.+76     	; 0x12aa <set_externalInterrupt+0x72>
				MCUCR |= (1 << ISC10);
			else if (state == FALLING_EDGE)
    125e:	63 30       	cpi	r22, 0x03	; 3
    1260:	61 f1       	breq	.+88     	; 0x12ba <set_externalInterrupt+0x82>
				MCUCR |= (1 << ISC11);
			else if (state == RISING_EDGE)
    1262:	62 30       	cpi	r22, 0x02	; 2
    1264:	b1 f4       	brne	.+44     	; 0x1292 <set_externalInterrupt+0x5a>
				MCUCR |= (1 << ISC10) | (1 << ISC11);
    1266:	85 b7       	in	r24, 0x35	; 53
    1268:	8c 60       	ori	r24, 0x0C	; 12
    126a:	85 bf       	out	0x35, r24	; 53
    126c:	12 c0       	rjmp	.+36     	; 0x1292 <set_externalInterrupt+0x5a>
void set_externalInterrupt(unsigned char interrupt_num, unsigned char state)
{
	switch(interrupt_num)
	{
		case INT0:
			if (state == LOW_LEVEL)
    126e:	66 23       	and	r22, r22
    1270:	51 f0       	breq	.+20     	; 0x1286 <set_externalInterrupt+0x4e>
				MCUCR = 0x00;
			else if (state == CHANGE)
    1272:	61 30       	cpi	r22, 0x01	; 1
    1274:	f1 f0       	breq	.+60     	; 0x12b2 <set_externalInterrupt+0x7a>
				MCUCR |= (1 << ISC00);
			else if (state == FALLING_EDGE)
    1276:	63 30       	cpi	r22, 0x03	; 3
    1278:	21 f1       	breq	.+72     	; 0x12c2 <set_externalInterrupt+0x8a>
				MCUCR |= (1 << ISC01);
			else if (state == RISING_EDGE)	
    127a:	62 30       	cpi	r22, 0x02	; 2
    127c:	29 f4       	brne	.+10     	; 0x1288 <set_externalInterrupt+0x50>
				MCUCR |= ((1 << ISC00) | (1 << ISC01));	
    127e:	85 b7       	in	r24, 0x35	; 53
    1280:	83 60       	ori	r24, 0x03	; 3
    1282:	85 bf       	out	0x35, r24	; 53
    1284:	01 c0       	rjmp	.+2      	; 0x1288 <set_externalInterrupt+0x50>
{
	switch(interrupt_num)
	{
		case INT0:
			if (state == LOW_LEVEL)
				MCUCR = 0x00;
    1286:	15 be       	out	0x35, r1	; 53
				MCUCR |= (1 << ISC00);
			else if (state == FALLING_EDGE)
				MCUCR |= (1 << ISC01);
			else if (state == RISING_EDGE)	
				MCUCR |= ((1 << ISC00) | (1 << ISC01));	
			GICR |= (1 << INT0);
    1288:	8b b7       	in	r24, 0x3b	; 59
    128a:	80 64       	ori	r24, 0x40	; 64
    128c:	8b bf       	out	0x3b, r24	; 59
		break;
    128e:	08 95       	ret
		
		case INT1:
			if (state == LOW_LEVEL)
				MCUCR = 0x00;
    1290:	15 be       	out	0x35, r1	; 53
				MCUCR |= (1 << ISC10);
			else if (state == FALLING_EDGE)
				MCUCR |= (1 << ISC11);
			else if (state == RISING_EDGE)
				MCUCR |= (1 << ISC10) | (1 << ISC11);
			GICR |= (1 << INT1);
    1292:	8b b7       	in	r24, 0x3b	; 59
    1294:	80 68       	ori	r24, 0x80	; 128
    1296:	8b bf       	out	0x3b, r24	; 59
		break;
    1298:	08 95       	ret
		
		case INT2:
			if (state == FALLING_EDGE)
				MCUCR &= ~(1 << ISC2);
    129a:	85 b7       	in	r24, 0x35	; 53
    129c:	8f 7b       	andi	r24, 0xBF	; 191
    129e:	85 bf       	out	0x35, r24	; 53
    12a0:	d6 cf       	rjmp	.-84     	; 0x124e <set_externalInterrupt+0x16>
			else if (state == RISING_EDGE)
				MCUCR |= (1 << ISC2);
    12a2:	85 b7       	in	r24, 0x35	; 53
    12a4:	80 64       	ori	r24, 0x40	; 64
    12a6:	85 bf       	out	0x35, r24	; 53
    12a8:	d2 cf       	rjmp	.-92     	; 0x124e <set_externalInterrupt+0x16>
		
		case INT1:
			if (state == LOW_LEVEL)
				MCUCR = 0x00;
			else if (state == CHANGE)
				MCUCR |= (1 << ISC10);
    12aa:	85 b7       	in	r24, 0x35	; 53
    12ac:	84 60       	ori	r24, 0x04	; 4
    12ae:	85 bf       	out	0x35, r24	; 53
    12b0:	f0 cf       	rjmp	.-32     	; 0x1292 <set_externalInterrupt+0x5a>
	{
		case INT0:
			if (state == LOW_LEVEL)
				MCUCR = 0x00;
			else if (state == CHANGE)
				MCUCR |= (1 << ISC00);
    12b2:	85 b7       	in	r24, 0x35	; 53
    12b4:	81 60       	ori	r24, 0x01	; 1
    12b6:	85 bf       	out	0x35, r24	; 53
    12b8:	e7 cf       	rjmp	.-50     	; 0x1288 <set_externalInterrupt+0x50>
			if (state == LOW_LEVEL)
				MCUCR = 0x00;
			else if (state == CHANGE)
				MCUCR |= (1 << ISC10);
			else if (state == FALLING_EDGE)
				MCUCR |= (1 << ISC11);
    12ba:	85 b7       	in	r24, 0x35	; 53
    12bc:	88 60       	ori	r24, 0x08	; 8
    12be:	85 bf       	out	0x35, r24	; 53
    12c0:	e8 cf       	rjmp	.-48     	; 0x1292 <set_externalInterrupt+0x5a>
			if (state == LOW_LEVEL)
				MCUCR = 0x00;
			else if (state == CHANGE)
				MCUCR |= (1 << ISC00);
			else if (state == FALLING_EDGE)
				MCUCR |= (1 << ISC01);
    12c2:	85 b7       	in	r24, 0x35	; 53
    12c4:	82 60       	ori	r24, 0x02	; 2
    12c6:	85 bf       	out	0x35, r24	; 53
    12c8:	df cf       	rjmp	.-66     	; 0x1288 <set_externalInterrupt+0x50>

000012ca <get_key>:

extern unsigned char get_key (void)
{
  unsigned char colloc, rowloc;
  
  KEY_DDR = 0xF0;                                                               //Columns bits are output and Rows' bits are input
    12ca:	80 ef       	ldi	r24, 0xF0	; 240
    12cc:	84 bb       	out	0x14, r24	; 20
  KEY_PRT = 0xFF;  
    12ce:	8f ef       	ldi	r24, 0xFF	; 255
    12d0:	85 bb       	out	0x15, r24	; 21
  KEY_PIN = 0x0F;
    12d2:	8f e0       	ldi	r24, 0x0F	; 15
    12d4:	83 bb       	out	0x13, r24	; 19
  
      do
          {
              KEY_PRT &= 0x0F;                                                  //ground all rows at once
    12d6:	85 b3       	in	r24, 0x15	; 21
    12d8:	8f 70       	andi	r24, 0x0F	; 15
    12da:	85 bb       	out	0x15, r24	; 21
              colloc = (KEY_PIN & 0x0F);                                        //read the columns
    12dc:	83 b3       	in	r24, 0x13	; 19
          } while(colloc != 0x0F);                                              //check untill all keys are released
    12de:	8f 70       	andi	r24, 0x0F	; 15
    12e0:	8f 30       	cpi	r24, 0x0F	; 15
    12e2:	c9 f7       	brne	.-14     	; 0x12d6 <get_key+0xc>
    12e4:	87 e8       	ldi	r24, 0x87	; 135
    12e6:	93 e1       	ldi	r25, 0x13	; 19
    12e8:	01 97       	sbiw	r24, 0x01	; 1
    12ea:	f1 f7       	brne	.-4      	; 0x12e8 <get_key+0x1e>
    12ec:	00 c0       	rjmp	.+0      	; 0x12ee <get_key+0x24>
    12ee:	00 00       	nop
      do
        { 
            do
              {
                  _delay_ms(20);                                        //Delay to allow the user to enter the required Key
                  colloc = (KEY_PIN & 0x0F);                                    //read the columns
    12f0:	83 b3       	in	r24, 0x13	; 19
              } while(colloc != 0x0F);                                          //wait for key press
    12f2:	8f 70       	andi	r24, 0x0F	; 15
    12f4:	8f 30       	cpi	r24, 0x0F	; 15
    12f6:	b1 f7       	brne	.-20     	; 0x12e4 <get_key+0x1a>
    12f8:	87 e8       	ldi	r24, 0x87	; 135
    12fa:	93 e1       	ldi	r25, 0x13	; 19
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <get_key+0x32>
    1300:	00 c0       	rjmp	.+0      	; 0x1302 <get_key+0x38>
    1302:	00 00       	nop
          
            _delay_ms(20);                                              //Delay for debounce
            colloc = (KEY_PIN & 0x0F);                                          //read the columns
    1304:	83 b3       	in	r24, 0x13	; 19
        } while(colloc != 0x0F);                                                //wait for key press
    1306:	8f 70       	andi	r24, 0x0F	; 15
    1308:	8f 30       	cpi	r24, 0x0F	; 15
    130a:	61 f7       	brne	.-40     	; 0x12e4 <get_key+0x1a>
      
      while(1)
      {
        KEY_PRT = 0xEF;                                                         //ground row 0
    130c:	9f ee       	ldi	r25, 0xEF	; 239
        if (colloc != 0x0F)                                                     //column detected
        {
          rowloc = 0;                                                           //save row location 
          break;                                                                //exit while loop                                
        }
        KEY_PRT = 0xDF;                                                         //ground row 1
    130e:	2f ed       	ldi	r18, 0xDF	; 223
        if (colloc != 0x0F)                                                     //column detected
        {
          rowloc = 1;                                                           //save row location 
          break;                                                                //exit while loop                                
        }
        KEY_PRT = 0xBF;                                                         //ground row 2
    1310:	3f eb       	ldi	r19, 0xBF	; 191
        if (colloc != 0x0F)                                                     //column detected
        {
          rowloc = 2;                                                           //save row location 
          break;                                                                //exit while loop                                
        }
        KEY_PRT = 0x7F;                                                         //ground row 3
    1312:	4f e7       	ldi	r20, 0x7F	; 127
    1314:	0f c0       	rjmp	.+30     	; 0x1334 <get_key+0x6a>
        if (colloc != 0x0F)                                                     //column detected
        {
          rowloc = 0;                                                           //save row location 
          break;                                                                //exit while loop                                
        }
        KEY_PRT = 0xDF;                                                         //ground row 1
    1316:	25 bb       	out	0x15, r18	; 21
        colloc = (KEY_PIN & 0x0F);                                              //read the columns
    1318:	83 b3       	in	r24, 0x13	; 19
    131a:	8f 70       	andi	r24, 0x0F	; 15
        if (colloc != 0x0F)                                                     //column detected
    131c:	8f 30       	cpi	r24, 0x0F	; 15
    131e:	31 f5       	brne	.+76     	; 0x136c <get_key+0xa2>
        {
          rowloc = 1;                                                           //save row location 
          break;                                                                //exit while loop                                
        }
        KEY_PRT = 0xBF;                                                         //ground row 2
    1320:	35 bb       	out	0x15, r19	; 21
        colloc = (KEY_PIN & 0x0F);                                              //read the columns
    1322:	83 b3       	in	r24, 0x13	; 19
    1324:	8f 70       	andi	r24, 0x0F	; 15
        if (colloc != 0x0F)                                                     //column detected
    1326:	8f 30       	cpi	r24, 0x0F	; 15
    1328:	f1 f4       	brne	.+60     	; 0x1366 <get_key+0x9c>
        {
          rowloc = 2;                                                           //save row location 
          break;                                                                //exit while loop                                
        }
        KEY_PRT = 0x7F;                                                         //ground row 3
    132a:	45 bb       	out	0x15, r20	; 21
        colloc = (KEY_PIN & 0x0F);                                              //read the columns
    132c:	83 b3       	in	r24, 0x13	; 19
    132e:	8f 70       	andi	r24, 0x0F	; 15
        if (colloc != 0x0F)                                                     //column detected
    1330:	8f 30       	cpi	r24, 0x0F	; 15
    1332:	b1 f4       	brne	.+44     	; 0x1360 <get_key+0x96>
            colloc = (KEY_PIN & 0x0F);                                          //read the columns
        } while(colloc != 0x0F);                                                //wait for key press
      
      while(1)
      {
        KEY_PRT = 0xEF;                                                         //ground row 0
    1334:	95 bb       	out	0x15, r25	; 21
        colloc = (KEY_PIN & 0x0F);                                              //read the columns
    1336:	83 b3       	in	r24, 0x13	; 19
    1338:	8f 70       	andi	r24, 0x0F	; 15
        if (colloc != 0x0F)                                                     //column detected
    133a:	8f 30       	cpi	r24, 0x0F	; 15
    133c:	61 f3       	breq	.-40     	; 0x1316 <get_key+0x4c>
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
      }
      
      
     //check column and save result in key
      if(colloc == 0x0E)
        return (keypad[rowloc][0]);
    1342:	22 0f       	add	r18, r18
    1344:	33 1f       	adc	r19, r19
    1346:	22 0f       	add	r18, r18
    1348:	33 1f       	adc	r19, r19
    134a:	f9 01       	movw	r30, r18
    134c:	e5 53       	subi	r30, 0x35	; 53
    134e:	fe 4f       	sbci	r31, 0xFE	; 254
        }
      }
      
      
     //check column and save result in key
      if(colloc == 0x0E)
    1350:	8e 30       	cpi	r24, 0x0E	; 14
    1352:	79 f0       	breq	.+30     	; 0x1372 <get_key+0xa8>
        return (keypad[rowloc][0]);
      else if(colloc == 0x0D)
    1354:	8d 30       	cpi	r24, 0x0D	; 13
    1356:	79 f0       	breq	.+30     	; 0x1376 <get_key+0xac>
        return (keypad[rowloc][1]);
      else if(colloc == 0x0B)
    1358:	8b 30       	cpi	r24, 0x0B	; 11
    135a:	79 f0       	breq	.+30     	; 0x137a <get_key+0xb0>
        return (keypad[rowloc][2]);
      else 
        return (keypad[rowloc][3]);  
    135c:	83 81       	ldd	r24, Z+3	; 0x03
}  
    135e:	08 95       	ret
    1360:	23 e0       	ldi	r18, 0x03	; 3
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	ee cf       	rjmp	.-36     	; 0x1342 <get_key+0x78>
    1366:	22 e0       	ldi	r18, 0x02	; 2
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	eb cf       	rjmp	.-42     	; 0x1342 <get_key+0x78>
    136c:	21 e0       	ldi	r18, 0x01	; 1
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	e8 cf       	rjmp	.-48     	; 0x1342 <get_key+0x78>
      }
      
      
     //check column and save result in key
      if(colloc == 0x0E)
        return (keypad[rowloc][0]);
    1372:	80 81       	ld	r24, Z
    1374:	08 95       	ret
      else if(colloc == 0x0D)
        return (keypad[rowloc][1]);
    1376:	81 81       	ldd	r24, Z+1	; 0x01
    1378:	08 95       	ret
      else if(colloc == 0x0B)
        return (keypad[rowloc][2]);
    137a:	82 81       	ldd	r24, Z+2	; 0x02
    137c:	08 95       	ret

0000137e <main>:
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	2b 97       	sbiw	r28, 0x0b	; 11
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	0e 94 62 02 	call	0x4c4	; 0x4c4 <init>
    1396:	6e 01       	movw	r12, r28
    1398:	08 94       	sec
    139a:	c1 1c       	adc	r12, r1
    139c:	d1 1c       	adc	r13, r1
    139e:	6a e0       	ldi	r22, 0x0A	; 10
    13a0:	b6 2e       	mov	r11, r22
    13a2:	7b e0       	ldi	r23, 0x0B	; 11
    13a4:	a7 2e       	mov	r10, r23
    13a6:	8a e1       	ldi	r24, 0x1A	; 26
    13a8:	0e 94 15 09 	call	0x122a	; 0x122a <eeprom_read>
    13ac:	8f 3f       	cpi	r24, 0xFF	; 255
    13ae:	09 f4       	brne	.+2      	; 0x13b2 <main+0x34>
    13b0:	60 c0       	rjmp	.+192    	; 0x1472 <main+0xf4>
    13b2:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
    13b6:	80 e6       	ldi	r24, 0x60	; 96
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	62 e0       	ldi	r22, 0x02	; 2
    13c2:	0e 94 33 01 	call	0x266	; 0x266 <lcd_gotoxy>
    13c6:	84 e7       	ldi	r24, 0x74	; 116
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
    13ce:	0e 94 65 09 	call	0x12ca	; 0x12ca <get_key>
    13d2:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
    13d6:	83 e8       	ldi	r24, 0x83	; 131
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	62 e0       	ldi	r22, 0x02	; 2
    13e2:	0e 94 33 01 	call	0x266	; 0x266 <lcd_gotoxy>
    13e6:	8d e8       	ldi	r24, 0x8D	; 141
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
    13ee:	0e 94 65 09 	call	0x12ca	; 0x12ca <get_key>
    13f2:	98 2f       	mov	r25, r24
    13f4:	91 53       	subi	r25, 0x31	; 49
    13f6:	92 30       	cpi	r25, 0x02	; 2
    13f8:	60 f7       	brcc	.-40     	; 0x13d2 <main+0x54>
    13fa:	d6 01       	movw	r26, r12
    13fc:	81 33       	cpi	r24, 0x31	; 49
    13fe:	09 f4       	brne	.+2      	; 0x1402 <main+0x84>
    1400:	66 c0       	rjmp	.+204    	; 0x14ce <main+0x150>
    1402:	eb 2d       	mov	r30, r11
    1404:	1d 92       	st	X+, r1
    1406:	ea 95       	dec	r30
    1408:	e9 f7       	brne	.-6      	; 0x1404 <main+0x86>
    140a:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
    140e:	8a e0       	ldi	r24, 0x0A	; 10
    1410:	91 e0       	ldi	r25, 0x01	; 1
    1412:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	62 e0       	ldi	r22, 0x02	; 2
    141a:	0e 94 33 01 	call	0x266	; 0x266 <lcd_gotoxy>
    141e:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_cursor_on>
    1422:	00 e0       	ldi	r16, 0x00	; 0
    1424:	10 e0       	ldi	r17, 0x00	; 0
    1426:	0e 94 65 09 	call	0x12ca	; 0x12ca <get_key>
    142a:	83 32       	cpi	r24, 0x23	; 35
    142c:	91 f0       	breq	.+36     	; 0x1452 <main+0xd4>
    142e:	8a 32       	cpi	r24, 0x2A	; 42
    1430:	09 f4       	brne	.+2      	; 0x1434 <main+0xb6>
    1432:	3f c0       	rjmp	.+126    	; 0x14b2 <main+0x134>
    1434:	0a 30       	cpi	r16, 0x0A	; 10
    1436:	11 05       	cpc	r17, r1
    1438:	b1 f3       	breq	.-20     	; 0x1426 <main+0xa8>
    143a:	f6 01       	movw	r30, r12
    143c:	e0 0f       	add	r30, r16
    143e:	f1 1f       	adc	r31, r17
    1440:	80 83       	st	Z, r24
    1442:	0f 5f       	subi	r16, 0xFF	; 255
    1444:	1f 4f       	sbci	r17, 0xFF	; 255
    1446:	8a e2       	ldi	r24, 0x2A	; 42
    1448:	0e 94 1e 01 	call	0x23c	; 0x23c <lcdData>
    144c:	0b 30       	cpi	r16, 0x0B	; 11
    144e:	11 05       	cpc	r17, r1
    1450:	54 f3       	brlt	.-44     	; 0x1426 <main+0xa8>
    1452:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_cursor_off>
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	0e 94 15 09 	call	0x122a	; 0x122a <eeprom_read>
    145c:	08 17       	cp	r16, r24
    145e:	09 f4       	brne	.+2      	; 0x1462 <main+0xe4>
    1460:	74 c0       	rjmp	.+232    	; 0x154a <main+0x1cc>
    1462:	0e 94 dd 03 	call	0x7ba	; 0x7ba <change_password>
    1466:	8a e1       	ldi	r24, 0x1A	; 26
    1468:	0e 94 15 09 	call	0x122a	; 0x122a <eeprom_read>
    146c:	8f 3f       	cpi	r24, 0xFF	; 255
    146e:	09 f0       	breq	.+2      	; 0x1472 <main+0xf4>
    1470:	a0 cf       	rjmp	.-192    	; 0x13b2 <main+0x34>
    1472:	0e 94 79 05 	call	0xaf2	; 0xaf2 <get_puk_code>
    1476:	88 23       	and	r24, r24
    1478:	e1 f3       	breq	.-8      	; 0x1472 <main+0xf4>
    147a:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
    147e:	81 e9       	ldi	r24, 0x91	; 145
    1480:	91 e0       	ldi	r25, 0x01	; 1
    1482:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
    1486:	8a e1       	ldi	r24, 0x1A	; 26
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	0e 94 08 09 	call	0x1210	; 0x1210 <eeprom_write>
    1490:	89 e1       	ldi	r24, 0x19	; 25
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	60 e0       	ldi	r22, 0x00	; 0
    1496:	0e 94 08 09 	call	0x1210	; 0x1210 <eeprom_write>
    149a:	8f e3       	ldi	r24, 0x3F	; 63
    149c:	9d e0       	ldi	r25, 0x0D	; 13
    149e:	a3 e0       	ldi	r26, 0x03	; 3
    14a0:	81 50       	subi	r24, 0x01	; 1
    14a2:	90 40       	sbci	r25, 0x00	; 0
    14a4:	a0 40       	sbci	r26, 0x00	; 0
    14a6:	e1 f7       	brne	.-8      	; 0x14a0 <main+0x122>
    14a8:	00 c0       	rjmp	.+0      	; 0x14aa <main+0x12c>
    14aa:	00 00       	nop
    14ac:	0e 94 ab 02 	call	0x556	; 0x556 <sign_up>
    14b0:	80 cf       	rjmp	.-256    	; 0x13b2 <main+0x34>
    14b2:	01 15       	cp	r16, r1
    14b4:	11 05       	cpc	r17, r1
    14b6:	09 f4       	brne	.+2      	; 0x14ba <main+0x13c>
    14b8:	b6 cf       	rjmp	.-148    	; 0x1426 <main+0xa8>
    14ba:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_move_cursor_left>
    14be:	80 e2       	ldi	r24, 0x20	; 32
    14c0:	0e 94 1e 01 	call	0x23c	; 0x23c <lcdData>
    14c4:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_move_cursor_left>
    14c8:	01 50       	subi	r16, 0x01	; 1
    14ca:	10 40       	sbci	r17, 0x00	; 0
    14cc:	bf cf       	rjmp	.-130    	; 0x144c <main+0xce>
    14ce:	ea 2d       	mov	r30, r10
    14d0:	1d 92       	st	X+, r1
    14d2:	ea 95       	dec	r30
    14d4:	e9 f7       	brne	.-6      	; 0x14d0 <main+0x152>
    14d6:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
    14da:	85 eb       	ldi	r24, 0xB5	; 181
    14dc:	91 e0       	ldi	r25, 0x01	; 1
    14de:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	62 e0       	ldi	r22, 0x02	; 2
    14e6:	0e 94 33 01 	call	0x266	; 0x266 <lcd_gotoxy>
    14ea:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_cursor_on>
    14ee:	00 e0       	ldi	r16, 0x00	; 0
    14f0:	10 e0       	ldi	r17, 0x00	; 0
    14f2:	0e 94 65 09 	call	0x12ca	; 0x12ca <get_key>
    14f6:	83 32       	cpi	r24, 0x23	; 35
    14f8:	89 f0       	breq	.+34     	; 0x151c <main+0x19e>
    14fa:	8a 32       	cpi	r24, 0x2A	; 42
    14fc:	c9 f0       	breq	.+50     	; 0x1530 <main+0x1b2>
    14fe:	0a 30       	cpi	r16, 0x0A	; 10
    1500:	11 05       	cpc	r17, r1
    1502:	b9 f3       	breq	.-18     	; 0x14f2 <main+0x174>
    1504:	f6 01       	movw	r30, r12
    1506:	e0 0f       	add	r30, r16
    1508:	f1 1f       	adc	r31, r17
    150a:	80 83       	st	Z, r24
    150c:	0f 5f       	subi	r16, 0xFF	; 255
    150e:	1f 4f       	sbci	r17, 0xFF	; 255
    1510:	8a e2       	ldi	r24, 0x2A	; 42
    1512:	0e 94 1e 01 	call	0x23c	; 0x23c <lcdData>
    1516:	0b 30       	cpi	r16, 0x0B	; 11
    1518:	11 05       	cpc	r17, r1
    151a:	5c f3       	brlt	.-42     	; 0x14f2 <main+0x174>
    151c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_cursor_off>
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	0e 94 15 09 	call	0x122a	; 0x122a <eeprom_read>
    1526:	08 17       	cp	r16, r24
    1528:	91 f1       	breq	.+100    	; 0x158e <main+0x210>
    152a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <try_again>
    152e:	3b cf       	rjmp	.-394    	; 0x13a6 <main+0x28>
    1530:	01 15       	cp	r16, r1
    1532:	11 05       	cpc	r17, r1
    1534:	f1 f2       	breq	.-68     	; 0x14f2 <main+0x174>
    1536:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_move_cursor_left>
    153a:	80 e2       	ldi	r24, 0x20	; 32
    153c:	0e 94 1e 01 	call	0x23c	; 0x23c <lcdData>
    1540:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_move_cursor_left>
    1544:	01 50       	subi	r16, 0x01	; 1
    1546:	10 40       	sbci	r17, 0x00	; 0
    1548:	e6 cf       	rjmp	.-52     	; 0x1516 <main+0x198>
    154a:	00 23       	and	r16, r16
    154c:	09 f4       	brne	.+2      	; 0x1550 <main+0x1d2>
    154e:	40 c0       	rjmp	.+128    	; 0x15d0 <main+0x252>
    1550:	76 01       	movw	r14, r12
    1552:	0e 5f       	subi	r16, 0xFE	; 254
    1554:	12 e0       	ldi	r17, 0x02	; 2
    1556:	03 c0       	rjmp	.+6      	; 0x155e <main+0x1e0>
    1558:	1f 5f       	subi	r17, 0xFF	; 255
    155a:	10 17       	cp	r17, r16
    155c:	c9 f1       	breq	.+114    	; 0x15d0 <main+0x252>
    155e:	d7 01       	movw	r26, r14
    1560:	9d 90       	ld	r9, X+
    1562:	7d 01       	movw	r14, r26
    1564:	81 2f       	mov	r24, r17
    1566:	0e 94 15 09 	call	0x122a	; 0x122a <eeprom_read>
    156a:	98 16       	cp	r9, r24
    156c:	a9 f3       	breq	.-22     	; 0x1558 <main+0x1da>
    156e:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
    1572:	8e e1       	ldi	r24, 0x1E	; 30
    1574:	91 e0       	ldi	r25, 0x01	; 1
    1576:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
    157a:	8f e3       	ldi	r24, 0x3F	; 63
    157c:	9d e0       	ldi	r25, 0x0D	; 13
    157e:	a3 e0       	ldi	r26, 0x03	; 3
    1580:	81 50       	subi	r24, 0x01	; 1
    1582:	90 40       	sbci	r25, 0x00	; 0
    1584:	a0 40       	sbci	r26, 0x00	; 0
    1586:	e1 f7       	brne	.-8      	; 0x1580 <main+0x202>
    1588:	00 c0       	rjmp	.+0      	; 0x158a <main+0x20c>
    158a:	00 00       	nop
    158c:	6a cf       	rjmp	.-300    	; 0x1462 <main+0xe4>
    158e:	00 23       	and	r16, r16
    1590:	11 f1       	breq	.+68     	; 0x15d6 <main+0x258>
    1592:	76 01       	movw	r14, r12
    1594:	0e 5f       	subi	r16, 0xFE	; 254
    1596:	12 e0       	ldi	r17, 0x02	; 2
    1598:	03 c0       	rjmp	.+6      	; 0x15a0 <main+0x222>
    159a:	1f 5f       	subi	r17, 0xFF	; 255
    159c:	10 17       	cp	r17, r16
    159e:	d9 f0       	breq	.+54     	; 0x15d6 <main+0x258>
    15a0:	d7 01       	movw	r26, r14
    15a2:	9d 90       	ld	r9, X+
    15a4:	7d 01       	movw	r14, r26
    15a6:	81 2f       	mov	r24, r17
    15a8:	0e 94 15 09 	call	0x122a	; 0x122a <eeprom_read>
    15ac:	98 16       	cp	r9, r24
    15ae:	a9 f3       	breq	.-22     	; 0x159a <main+0x21c>
    15b0:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
    15b4:	8e e1       	ldi	r24, 0x1E	; 30
    15b6:	91 e0       	ldi	r25, 0x01	; 1
    15b8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
    15bc:	8f e3       	ldi	r24, 0x3F	; 63
    15be:	9d e0       	ldi	r25, 0x0D	; 13
    15c0:	a3 e0       	ldi	r26, 0x03	; 3
    15c2:	81 50       	subi	r24, 0x01	; 1
    15c4:	90 40       	sbci	r25, 0x00	; 0
    15c6:	a0 40       	sbci	r26, 0x00	; 0
    15c8:	e1 f7       	brne	.-8      	; 0x15c2 <main+0x244>
    15ca:	00 c0       	rjmp	.+0      	; 0x15cc <main+0x24e>
    15cc:	00 00       	nop
    15ce:	ad cf       	rjmp	.-166    	; 0x152a <main+0x1ac>
    15d0:	0e 94 ab 02 	call	0x556	; 0x556 <sign_up>
    15d4:	e8 ce       	rjmp	.-560    	; 0x13a6 <main+0x28>
    15d6:	82 e4       	ldi	r24, 0x42	; 66
    15d8:	63 e0       	ldi	r22, 0x03	; 3
    15da:	41 e0       	ldi	r20, 0x01	; 1
    15dc:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_write>
    15e0:	82 e4       	ldi	r24, 0x42	; 66
    15e2:	60 e0       	ldi	r22, 0x00	; 0
    15e4:	41 e0       	ldi	r20, 0x01	; 1
    15e6:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_write>
    15ea:	82 e4       	ldi	r24, 0x42	; 66
    15ec:	61 e0       	ldi	r22, 0x01	; 1
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_write>
    15f4:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_clear>
    15f8:	84 e2       	ldi	r24, 0x24	; 36
    15fa:	91 e0       	ldi	r25, 0x01	; 1
    15fc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_print>
    1600:	8f e7       	ldi	r24, 0x7F	; 127
    1602:	9a e1       	ldi	r25, 0x1A	; 26
    1604:	a6 e0       	ldi	r26, 0x06	; 6
    1606:	81 50       	subi	r24, 0x01	; 1
    1608:	90 40       	sbci	r25, 0x00	; 0
    160a:	a0 40       	sbci	r26, 0x00	; 0
    160c:	e1 f7       	brne	.-8      	; 0x1606 <main+0x288>
    160e:	00 c0       	rjmp	.+0      	; 0x1610 <main+0x292>
    1610:	00 00       	nop
    1612:	82 e4       	ldi	r24, 0x42	; 66
    1614:	63 e0       	ldi	r22, 0x03	; 3
    1616:	40 e0       	ldi	r20, 0x00	; 0
    1618:	0e 94 98 08 	call	0x1130	; 0x1130 <DIO_write>
    161c:	89 e1       	ldi	r24, 0x19	; 25
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	60 e0       	ldi	r22, 0x00	; 0
    1622:	0e 94 08 09 	call	0x1210	; 0x1210 <eeprom_write>
    1626:	bf ce       	rjmp	.-642    	; 0x13a6 <main+0x28>

00001628 <__tablejump2__>:
    1628:	ee 0f       	add	r30, r30
    162a:	ff 1f       	adc	r31, r31
    162c:	05 90       	lpm	r0, Z+
    162e:	f4 91       	lpm	r31, Z
    1630:	e0 2d       	mov	r30, r0
    1632:	09 94       	ijmp

00001634 <itoa>:
    1634:	45 32       	cpi	r20, 0x25	; 37
    1636:	51 05       	cpc	r21, r1
    1638:	20 f4       	brcc	.+8      	; 0x1642 <itoa+0xe>
    163a:	42 30       	cpi	r20, 0x02	; 2
    163c:	10 f0       	brcs	.+4      	; 0x1642 <itoa+0xe>
    163e:	0c 94 25 0b 	jmp	0x164a	; 0x164a <__itoa_ncheck>
    1642:	fb 01       	movw	r30, r22
    1644:	10 82       	st	Z, r1
    1646:	cb 01       	movw	r24, r22
    1648:	08 95       	ret

0000164a <__itoa_ncheck>:
    164a:	bb 27       	eor	r27, r27
    164c:	4a 30       	cpi	r20, 0x0A	; 10
    164e:	31 f4       	brne	.+12     	; 0x165c <__itoa_ncheck+0x12>
    1650:	99 23       	and	r25, r25
    1652:	22 f4       	brpl	.+8      	; 0x165c <__itoa_ncheck+0x12>
    1654:	bd e2       	ldi	r27, 0x2D	; 45
    1656:	90 95       	com	r25
    1658:	81 95       	neg	r24
    165a:	9f 4f       	sbci	r25, 0xFF	; 255
    165c:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <__utoa_common>

00001660 <__utoa_ncheck>:
    1660:	bb 27       	eor	r27, r27

00001662 <__utoa_common>:
    1662:	fb 01       	movw	r30, r22
    1664:	55 27       	eor	r21, r21
    1666:	aa 27       	eor	r26, r26
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	aa 1f       	adc	r26, r26
    166e:	a4 17       	cp	r26, r20
    1670:	10 f0       	brcs	.+4      	; 0x1676 <__utoa_common+0x14>
    1672:	a4 1b       	sub	r26, r20
    1674:	83 95       	inc	r24
    1676:	50 51       	subi	r21, 0x10	; 16
    1678:	b9 f7       	brne	.-18     	; 0x1668 <__utoa_common+0x6>
    167a:	a0 5d       	subi	r26, 0xD0	; 208
    167c:	aa 33       	cpi	r26, 0x3A	; 58
    167e:	08 f0       	brcs	.+2      	; 0x1682 <__utoa_common+0x20>
    1680:	a9 5d       	subi	r26, 0xD9	; 217
    1682:	a1 93       	st	Z+, r26
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	79 f7       	brne	.-34     	; 0x1666 <__utoa_common+0x4>
    1688:	b1 11       	cpse	r27, r1
    168a:	b1 93       	st	Z+, r27
    168c:	11 92       	st	Z+, r1
    168e:	cb 01       	movw	r24, r22
    1690:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <strrev>

00001694 <strrev>:
    1694:	dc 01       	movw	r26, r24
    1696:	fc 01       	movw	r30, r24
    1698:	67 2f       	mov	r22, r23
    169a:	71 91       	ld	r23, Z+
    169c:	77 23       	and	r23, r23
    169e:	e1 f7       	brne	.-8      	; 0x1698 <strrev+0x4>
    16a0:	32 97       	sbiw	r30, 0x02	; 2
    16a2:	04 c0       	rjmp	.+8      	; 0x16ac <strrev+0x18>
    16a4:	7c 91       	ld	r23, X
    16a6:	6d 93       	st	X+, r22
    16a8:	70 83       	st	Z, r23
    16aa:	62 91       	ld	r22, -Z
    16ac:	ae 17       	cp	r26, r30
    16ae:	bf 07       	cpc	r27, r31
    16b0:	c8 f3       	brcs	.-14     	; 0x16a4 <strrev+0x10>
    16b2:	08 95       	ret

000016b4 <_exit>:
    16b4:	f8 94       	cli

000016b6 <__stop_program>:
    16b6:	ff cf       	rjmp	.-2      	; 0x16b6 <__stop_program>
